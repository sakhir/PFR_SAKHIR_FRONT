import { __decorate, __metadata } from "tslib";
import { AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, QueryList, Renderer2, SimpleChange, TemplateRef, ViewChild, ViewChildren } from '@angular/core';
import { TabToggleDirective } from './tabs.directive';
import { removeListeners, removeSubscriptions } from '../helpers';
// @TODO Vertical tabs
/*
 *
 */
let TabHeaderComponent = class TabHeaderComponent {
};
__decorate([
    ViewChild('templateRef', { static: true }),
    __metadata("design:type", TemplateRef)
], TabHeaderComponent.prototype, "templateRef", void 0);
TabHeaderComponent = __decorate([
    Component({
        selector: 'mk-tab-header',
        template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], TabHeaderComponent);
export { TabHeaderComponent };
/*
 *
 */
let TabContentComponent = class TabContentComponent {
};
__decorate([
    ViewChild('templateRef', { static: true }),
    __metadata("design:type", TemplateRef)
], TabContentComponent.prototype, "templateRef", void 0);
TabContentComponent = __decorate([
    Component({
        selector: 'mk-tab-content',
        template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], TabContentComponent);
export { TabContentComponent };
/*
 *
 */
let TabComponent = class TabComponent {
    constructor() {
        this.isActive = false;
    }
    /**
     * @method ngOnInit
     */
    ngAfterContentInit() {
        if (this.tabContentComponent) {
            this.contentTemplateRef = this.tabContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], TabComponent.prototype, "header", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TabComponent.prototype, "isDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TabComponent.prototype, "tabColor", void 0);
__decorate([
    ViewChild('templateRef', { static: true }),
    __metadata("design:type", TemplateRef)
], TabComponent.prototype, "templateRef", void 0);
__decorate([
    ContentChild(TabHeaderComponent),
    __metadata("design:type", TabHeaderComponent)
], TabComponent.prototype, "tabHeaderComponent", void 0);
__decorate([
    ContentChild(TabContentComponent),
    __metadata("design:type", TabContentComponent)
], TabComponent.prototype, "tabContentComponent", void 0);
TabComponent = __decorate([
    Component({
        selector: 'mk-tab',
        template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], TabComponent);
export { TabComponent };
/*
 *
 */
let TabsHeaderComponent = class TabsHeaderComponent {
};
__decorate([
    ViewChild('templateRef', { static: true }),
    __metadata("design:type", TemplateRef)
], TabsHeaderComponent.prototype, "templateRef", void 0);
TabsHeaderComponent = __decorate([
    Component({
        selector: 'mk-tabs-header',
        template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], TabsHeaderComponent);
export { TabsHeaderComponent };
/*
 *
 */
let TabsComponent = class TabsComponent {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    constructor(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.subscriptions = [];
        this.headerStyleClass = 'header pull-left';
        this.navStyleClass = 'nav nav-tabs';
        this.contentStyleClass = 'tab-content';
        this.styleClass = 'nav-tabs-custom';
        this.closeTab = new EventEmitter();
        this.openTab = new EventEmitter();
    }
    set activeTabIndex(index) {
        this.activatedTabIndex = index;
        this.changeDetectorRef.detectChanges();
    }
    /**
     * @method ngAfterViewInit
     */
    ngAfterContentInit() {
        // Set tab index on load.
        this.setTabIndex();
        // Update tab index if tabs is updated.
        this.subscriptions.push(this.tabs.changes.subscribe(() => {
            this.setTabIndex();
        }));
        // Open tab on load.
        this.openTabIndex();
    }
    /**
     * @method ngAfterViewInit
     */
    ngAfterViewInit() {
        // Set tab toggles on load.
        this.setTabsToggle();
        // Update tab toggles if tabs is updated.
        this.subscriptions.push(this.tabToggleDirectives.changes.subscribe(() => {
            this.setTabsToggle();
        }));
    }
    /**
     * @method ngOnChanges
     * @param changes [description]
     */
    ngOnChanges(changes) {
        if (changes.activeTabIndex) {
            this.openTabIndex();
        }
    }
    /**
     * @method ngOnDestroy
     */
    ngOnDestroy() {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    }
    /**
     * [toggleTab description]
     * @method toggleTab
     */
    openTabIndex() {
        if (this.tabs) {
            this.tabs.forEach((tab) => {
                if (this.activatedTabIndex === tab.index || (this.activatedTabIndex === undefined && tab.index === 0)) {
                    tab.isActive = true;
                    this.openTab.emit({ index: tab.index });
                    this.changeDetectorRef.detectChanges();
                }
                else if (tab.isActive) {
                    tab.isActive = false;
                    this.closeTab.emit({ index: tab.index });
                    this.changeDetectorRef.detectChanges();
                }
            });
        }
    }
    /**
     * [openTab description]
     * @method openTab
     * @param event     [description]
     * @param tabToOpen [description]
     */
    onOpenTab(event, tabToOpen) {
        event.preventDefault();
        tabToOpen.isActive = true;
        this.openTab.emit({ event, index: tabToOpen.index });
        this.tabs.forEach((tab) => {
            if (tab.isActive && tabToOpen !== tab) {
                tab.isActive = false;
                this.closeTab.emit({ event, index: tab.index });
            }
        });
    }
    /**
     * [setTabIndex description]
     * @method setTabIndex
     */
    setTabIndex() {
        this.tabs.forEach((tab, index) => {
            tab.index = index;
        });
        this.changeDetectorRef.detectChanges();
    }
    /**
     * [setTabsToggle description]
     * @method setTabsToggle
     */
    setTabsToggle() {
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular(() => {
            this.tabToggleDirectives.forEach((tabToggle) => {
                this.listeners.push(this.renderer2.listen(tabToggle.elementRef.nativeElement, 'click', (event) => {
                    this.onOpenTab(event, tabToggle.tabComponent);
                    this.changeDetectorRef.detectChanges();
                }));
            });
        });
    }
};
TabsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TabsComponent.prototype, "activeTabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], TabsComponent.prototype, "header", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TabsComponent.prototype, "headerStyleClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TabsComponent.prototype, "navStyleClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TabsComponent.prototype, "contentStyleClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TabsComponent.prototype, "styleClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TabsComponent.prototype, "tabsColor", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TabsComponent.prototype, "closeTab", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TabsComponent.prototype, "openTab", void 0);
__decorate([
    ContentChild(TabsHeaderComponent, { static: true }),
    __metadata("design:type", TabsHeaderComponent)
], TabsComponent.prototype, "tabsHeaderComponent", void 0);
__decorate([
    ContentChildren(TabComponent),
    __metadata("design:type", QueryList)
], TabsComponent.prototype, "tabs", void 0);
__decorate([
    ViewChildren(TabToggleDirective),
    __metadata("design:type", QueryList)
], TabsComponent.prototype, "tabToggleDirectives", void 0);
TabsComponent = __decorate([
    Component({
        selector: 'mk-tabs',
        template: "<div [ngClass]=\"styleClass\">\n  <ul [ngClass]=\"navStyleClass\" [class.pull-right]=\"header || tabsHeaderComponent\">\n    <li *ngFor=\"let tab of tabs\" [class.active]=\"tab.isActive\" [mkColor]=\"tab.tabColor || tabsColor\" mkColorProperty=\"border-top-color\">\n      <a *ngIf=\"!tab.isDisabled\" [mkTabToggle]=\"tab\" href=\"#\">\n        {{tab.header}}\n        <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent?.templateRef\"></ng-template>\n      </a>\n      <ng-template [ngIf]=\"tab.isDisabled\">\n        {{tab.header}}\n        <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent.templateRef\"></ng-template>\n      </ng-template>\n    </li>\n    <li *ngIf=\"tabsHeaderComponent || header\" [ngClass]=\"headerStyleClass\">\n      {{header}}\n      <ng-template *ngIf=\"!header\" [ngTemplateOutlet]=\"tabsHeaderComponent.templateRef\"></ng-template>\n    </li>\n  </ul>\n  <div [ngClass]=\"contentStyleClass\">\n    <div *ngFor=\"let tab of tabs\" class=\"tab-pane\" [class.active]=\"tab.isActive\">\n      <ng-template [ngTemplateOutlet]=\"tab.contentTemplateRef\"></ng-template>\n    </div>\n  </div>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".nav-tabs-custom>.nav-tabs>li{border-top-width:0}.nav-tabs-custom>.nav-tabs>li.active{border-top-width:3px}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef,
        NgZone,
        Renderer2])
], TabsComponent);
export { TabsComponent };
//# sourceMappingURL=data:application/json;base64,