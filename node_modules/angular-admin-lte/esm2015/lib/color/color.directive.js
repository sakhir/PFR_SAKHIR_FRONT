import { __decorate, __metadata } from "tslib";
import { Directive, Input, Renderer2, ElementRef } from '@angular/core';
import { ColorService } from './color.service';
let BackgroundColorDirective = class BackgroundColorDirective {
    /**
     * @method constructor
     * @param elementRef   [description]
     * @param renderer2    [description]
     * @param colorService [description]
     */
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
        this.condition = true;
    }
    set setPrefix(prefix) {
        this.prefix = prefix;
        this.colorService.setBackgroundColor(this.color, this.condition, this.property, this.prefix);
    }
    set setColor(color) {
        this.color = color;
        this.colorService.setBackgroundColor(this.color, this.condition, this.property, this.prefix);
    }
};
BackgroundColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
__decorate([
    Input('mkColorCondition'),
    __metadata("design:type", Object)
], BackgroundColorDirective.prototype, "condition", void 0);
__decorate([
    Input('mkColorPrefix'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], BackgroundColorDirective.prototype, "setPrefix", null);
__decorate([
    Input('mkColorProperty'),
    __metadata("design:type", String)
], BackgroundColorDirective.prototype, "property", void 0);
__decorate([
    Input('mkColor'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], BackgroundColorDirective.prototype, "setColor", null);
BackgroundColorDirective = __decorate([
    Directive({
        selector: '[mkColor]',
        providers: [ColorService]
    }),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        ColorService])
], BackgroundColorDirective);
export { BackgroundColorDirective };
let ColorDirective = class ColorDirective {
    /**
     * @method constructor
     * @param elementRef   [description]
     * @param renderer2    [description]
     * @param colorService [description]
     */
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
    }
    set color(color) {
        this.colorService.setFontColor(color);
    }
};
ColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
__decorate([
    Input('mkFontColor'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], ColorDirective.prototype, "color", null);
ColorDirective = __decorate([
    Directive({
        selector: '[mkFontColor]',
        providers: [ColorService]
    }),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        ColorService])
], ColorDirective);
export { ColorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hZG1pbi1sdGUvIiwic291cmNlcyI6WyJsaWIvY29sb3IvY29sb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU0vQyxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtJQUtuQzs7Ozs7T0FLRztJQUNILFlBQ1UsVUFBc0IsRUFDdEIsU0FBb0IsRUFDcEIsWUFBMEI7UUFGMUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBR1QsY0FBUyxHQUFHLElBQUksQ0FBQztJQUZ6QyxDQUFDO0lBR29CLElBQUksU0FBUyxDQUFDLE1BQWM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVpQixJQUFJLFFBQVEsQ0FBQyxLQUFhO1FBQzFDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9GLENBQUM7Q0FDRixDQUFBOztZQWZ1QixVQUFVO1lBQ1gsU0FBUztZQUNOLFlBQVk7O0FBR1Q7SUFBMUIsS0FBSyxDQUFDLGtCQUFrQixDQUFDOzsyREFBa0I7QUFDcEI7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7O3lEQUd0QjtBQUN5QjtJQUF6QixLQUFLLENBQUMsaUJBQWlCLENBQUM7OzBEQUFrQjtBQUN6QjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzs7d0RBR2hCO0FBMUJVLHdCQUF3QjtJQUpwQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsV0FBVztRQUNyQixTQUFTLEVBQUUsQ0FBQyxZQUFZLENBQUM7S0FDMUIsQ0FBQztxQ0Fhc0IsVUFBVTtRQUNYLFNBQVM7UUFDTixZQUFZO0dBZHpCLHdCQUF3QixDQTJCcEM7U0EzQlksd0JBQXdCO0FBaUNyQyxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0lBQ3pCOzs7OztPQUtHO0lBQ0gsWUFDVSxVQUFzQixFQUN0QixTQUFvQixFQUNwQixZQUEwQjtRQUYxQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFDakMsQ0FBQztJQUVrQixJQUFJLEtBQUssQ0FBQyxLQUFhO1FBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDRixDQUFBOztZQVJ1QixVQUFVO1lBQ1gsU0FBUztZQUNOLFlBQVk7O0FBR2Q7SUFBckIsS0FBSyxDQUFDLGFBQWEsQ0FBQzs7OzJDQUVwQjtBQWZVLGNBQWM7SUFKMUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGVBQWU7UUFDekIsU0FBUyxFQUFFLENBQUMsWUFBWSxDQUFDO0tBQzFCLENBQUM7cUNBU3NCLFVBQVU7UUFDWCxTQUFTO1FBQ04sWUFBWTtHQVZ6QixjQUFjLENBZ0IxQjtTQWhCWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbG9yU2VydmljZSB9IGZyb20gJy4vY29sb3Iuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tta0NvbG9yXScsXG4gIHByb3ZpZGVyczogW0NvbG9yU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZENvbG9yRGlyZWN0aXZlIHtcblxuICBwcml2YXRlIHByZWZpeDogc3RyaW5nO1xuICBwcml2YXRlIGNvbG9yOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGVsZW1lbnRSZWYgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSByZW5kZXJlcjIgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gY29sb3JTZXJ2aWNlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgY29sb3JTZXJ2aWNlOiBDb2xvclNlcnZpY2VcbiAgKSB7fVxuXG4gIEBJbnB1dCgnbWtDb2xvckNvbmRpdGlvbicpIGNvbmRpdGlvbiA9IHRydWU7XG4gIEBJbnB1dCgnbWtDb2xvclByZWZpeCcpIHNldCBzZXRQcmVmaXgocHJlZml4OiBzdHJpbmcpIHtcbiAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICB0aGlzLmNvbG9yU2VydmljZS5zZXRCYWNrZ3JvdW5kQ29sb3IodGhpcy5jb2xvciwgdGhpcy5jb25kaXRpb24sIHRoaXMucHJvcGVydHksIHRoaXMucHJlZml4KTtcbiAgfVxuICBASW5wdXQoJ21rQ29sb3JQcm9wZXJ0eScpIHByb3BlcnR5OiBzdHJpbmc7XG4gIEBJbnB1dCgnbWtDb2xvcicpIHNldCBzZXRDb2xvcihjb2xvcjogc3RyaW5nKSB7XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEJhY2tncm91bmRDb2xvcih0aGlzLmNvbG9yLCB0aGlzLmNvbmRpdGlvbiwgdGhpcy5wcm9wZXJ0eSwgdGhpcy5wcmVmaXgpO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tta0ZvbnRDb2xvcl0nLFxuICBwcm92aWRlcnM6IFtDb2xvclNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIENvbG9yRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGVsZW1lbnRSZWYgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSByZW5kZXJlcjIgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gY29sb3JTZXJ2aWNlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgY29sb3JTZXJ2aWNlOiBDb2xvclNlcnZpY2VcbiAgKSB7fVxuXG4gIEBJbnB1dCgnbWtGb250Q29sb3InKSBzZXQgY29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEZvbnRDb2xvcihjb2xvcik7XG4gIH1cbn1cbiJdfQ==