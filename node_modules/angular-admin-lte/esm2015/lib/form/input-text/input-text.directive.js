import { __decorate, __metadata } from "tslib";
import { Directive, Input, Renderer2, ElementRef, OnInit, HostListener } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { ColorService } from '../../color/color.service';
import { ClassService } from '../../services/class.service';
// @TODO onFocus Color
let InputTextDirective = class InputTextDirective {
    /**
     * @method constructor
     * @param  elementRef   [description]
     * @param  renderer2    [description]
     * @param  ngControl    [description]
     * @param  colorService [description]
     * @param  classService [description]
     */
    constructor(elementRef, renderer2, ngControl, colorService, classService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.ngControl = ngControl;
        this.colorService = colorService;
        this.classService = classService;
        this.defaultClass = 'form-control';
        this.onKeyUp = new Subject();
        this.onKeyup = this.onKeyUp.asObservable();
    }
    set borderColor(color) {
        this.colorService.setBackgroundColor(color, true, 'border-color', null);
    }
    set class(className) {
        this.isSetClass = true;
        this.classService.applyClasses(className);
    }
    set color(color) {
        this.colorService.setFontColor(color);
    }
    /**
     * @method ngOnInit
     */
    ngOnInit() {
        if (!this.isSetClass) {
            this.classService.applyClasses(this.defaultClass);
        }
    }
    keyUpListener() {
        this.onKeyUp.next(this.ngControl);
    }
};
InputTextDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgControl },
    { type: ColorService },
    { type: ClassService }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], InputTextDirective.prototype, "borderColor", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], InputTextDirective.prototype, "class", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], InputTextDirective.prototype, "color", null);
__decorate([
    HostListener('keyup'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], InputTextDirective.prototype, "keyUpListener", null);
InputTextDirective = __decorate([
    Directive({
        selector: '[mkInputText]',
        providers: [ColorService, ClassService]
    }),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        NgControl,
        ColorService,
        ClassService])
], InputTextDirective);
export { InputTextDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL2lucHV0LXRleHQvaW5wdXQtdGV4dC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTVELHNCQUFzQjtBQU10QixJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQWtCN0I7Ozs7Ozs7T0FPRztJQUNILFlBQ1MsVUFBc0IsRUFDdEIsU0FBb0IsRUFDbkIsU0FBb0IsRUFDcEIsWUFBMEIsRUFDMUIsWUFBMEI7UUFKM0IsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ25CLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsaUJBQVksR0FBWixZQUFZLENBQWM7UUE5QjVCLGlCQUFZLEdBQUcsY0FBYyxDQUFDO1FBRTlCLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBYSxDQUFDO1FBRXBDLFlBQU8sR0FBMEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQTJCakUsQ0FBQztJQXpCSyxJQUFJLFdBQVcsQ0FBQyxLQUFhO1FBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUNRLElBQUksS0FBSyxDQUFDLFNBQWlCO1FBQ2xDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFDUSxJQUFJLEtBQUssQ0FBQyxLQUFhO1FBQzlCLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFrQkQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVzQixhQUFhO1FBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0YsQ0FBQTs7WUFuQnNCLFVBQVU7WUFDWCxTQUFTO1lBQ1IsU0FBUztZQUNOLFlBQVk7WUFDWixZQUFZOztBQXhCM0I7SUFBUixLQUFLLEVBQUU7OztxREFFUDtBQUNRO0lBQVIsS0FBSyxFQUFFOzs7K0NBR1A7QUFDUTtJQUFSLEtBQUssRUFBRTs7OytDQUVQO0FBMkJzQjtJQUF0QixZQUFZLENBQUMsT0FBTyxDQUFDOzs7O3VEQUVyQjtBQTdDVSxrQkFBa0I7SUFKOUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGVBQWU7UUFDekIsU0FBUyxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQztLQUN4QyxDQUFDO3FDQTRCcUIsVUFBVTtRQUNYLFNBQVM7UUFDUixTQUFTO1FBQ04sWUFBWTtRQUNaLFlBQVk7R0EvQnpCLGtCQUFrQixDQThDOUI7U0E5Q1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBPbkluaXQsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IENvbG9yU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbG9yL2NvbG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xhc3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2xhc3Muc2VydmljZSc7XG5cbi8vIEBUT0RPIG9uRm9jdXMgQ29sb3JcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21rSW5wdXRUZXh0XScsXG4gIHByb3ZpZGVyczogW0NvbG9yU2VydmljZSwgQ2xhc3NTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dFRleHREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIGRlZmF1bHRDbGFzcyA9ICdmb3JtLWNvbnRyb2wnO1xuICBwcml2YXRlIGlzU2V0Q2xhc3M6IGJvb2xlYW47XG4gIHByaXZhdGUgb25LZXlVcCA9IG5ldyBTdWJqZWN0PE5nQ29udHJvbD4oKTtcblxuICBwdWJsaWMgb25LZXl1cDogT2JzZXJ2YWJsZTxOZ0NvbnRyb2w+ID0gdGhpcy5vbktleVVwLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIEBJbnB1dCgpIHNldCBib3JkZXJDb2xvcihjb2xvcjogc3RyaW5nKSB7XG4gICAgdGhpcy5jb2xvclNlcnZpY2Uuc2V0QmFja2dyb3VuZENvbG9yKGNvbG9yLCB0cnVlLCAnYm9yZGVyLWNvbG9yJywgbnVsbCk7XG4gIH1cbiAgQElucHV0KCkgc2V0IGNsYXNzKGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5pc1NldENsYXNzID0gdHJ1ZTtcbiAgICB0aGlzLmNsYXNzU2VydmljZS5hcHBseUNsYXNzZXMoY2xhc3NOYW1lKTtcbiAgfVxuICBASW5wdXQoKSBzZXQgY29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEZvbnRDb2xvcihjb2xvcik7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gIGVsZW1lbnRSZWYgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgcmVuZGVyZXIyICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICBuZ0NvbnRyb2wgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIGNvbG9yU2VydmljZSBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgY2xhc3NTZXJ2aWNlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHB1YmxpYyByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIG5nQ29udHJvbDogTmdDb250cm9sLFxuICAgIHByaXZhdGUgY29sb3JTZXJ2aWNlOiBDb2xvclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjbGFzc1NlcnZpY2U6IENsYXNzU2VydmljZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdPbkluaXRcbiAgICovXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5pc1NldENsYXNzKSB7XG4gICAgICB0aGlzLmNsYXNzU2VydmljZS5hcHBseUNsYXNzZXModGhpcy5kZWZhdWx0Q2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleXVwJykga2V5VXBMaXN0ZW5lcigpIHtcbiAgICB0aGlzLm9uS2V5VXAubmV4dCh0aGlzLm5nQ29udHJvbCk7XG4gIH1cbn1cbiJdfQ==