import { __decorate, __metadata, __spread, __param } from 'tslib';
import { Injectable, ChangeDetectorRef, Input, Component, NgModule, ElementRef, ViewChild, ChangeDetectionStrategy, TemplateRef, ContentChild, NgZone, Renderer2, EventEmitter, Output, Directive, ViewChildren, QueryList, InjectionToken, Optional, SkipSelf, ContentChildren, ViewContainerRef, HostListener } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NavigationEnd, PRIMARY_OUTLET, Router, RouterModule, NavigationStart, ActivationStart } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { Title } from '@angular/platform-browser';
import { pluck, distinctUntilChanged } from 'rxjs/operators';
import { NgControl, FormsModule } from '@angular/forms';

/*
 *
 */
var RoutingService = /** @class */ (function () {
    /**
     * @method constructor
     * @param router [description]
     */
    function RoutingService(router) {
        this.router = router;
        this.onChange = new BehaviorSubject(undefined);
        this.events = new BehaviorSubject(undefined);
        this.init();
    }
    RoutingService_1 = RoutingService;
    /**
     * [createUrl description]
     * @method createUrl
     * @param route [description]
     * @return [description]
     */
    RoutingService.createUrl = function (route) {
        var url = route.url.map(function (urlSegment) { return urlSegment.toString(); }).join('/');
        return url;
    };
    /**
     * [isChildrenSelfRoute description]
     * @method isChildrenSelfRoute
     * @param route [description]
     * @return [description]
     */
    RoutingService.isChildrenSelfRoute = function (route) {
        route.routeConfig.children.forEach(function (child) {
            if (child.path === '' && (child.component || child.loadChildren)) {
                return true;
            }
        });
        return false;
    };
    /**
     * [createBreadcrumb description]
     * @method createBreadcrumb
     * @param route [description]
     * @param url   [description]
     * @return [description]
     */
    RoutingService.createBreadcrumb = function (route, url) {
        var isUrl = true;
        if (route.children.length !== 0 && route.firstChild.routeConfig.path) {
            if (url !== '/' && !route.routeConfig.loadChildren && !route.routeConfig.component && !RoutingService_1.isChildrenSelfRoute(route)) {
                isUrl = false;
            }
        }
        return {
            data: route.data,
            params: route.params,
            url: isUrl ? url : null
        };
    };
    /**
     * [init description]
     * @method init
     */
    RoutingService.prototype.init = function () {
        var _this = this;
        this.router.events.subscribe(function (routeEvent) {
            // https://github.com/angular/angular/issues/17473: event not fired anymore on load for routed component.
            if (routeEvent instanceof NavigationEnd) {
                _this.events.next(routeEvent);
                var route = _this.router.routerState.root.snapshot;
                var tmpUrl = '';
                var url = '';
                var rootRoot = true;
                var paths = [];
                while (route.children.length) {
                    route = route.firstChild;
                    tmpUrl = "/" + RoutingService_1.createUrl(route);
                    if (route.outlet !== PRIMARY_OUTLET || (!route.routeConfig.path && !rootRoot)) {
                        continue;
                    }
                    rootRoot = false;
                    if (route.params && route.data) {
                        for (var key in route.params) {
                            if (!key) {
                                continue;
                            }
                            if (route.data.hasOwnProperty('title')) {
                                route.data.title = route.data.title.replace(":" + key, route.params[key]);
                                route.data.title = route.data.title.replace(":" + key, route.params[key]);
                            }
                            if (route.data.hasOwnProperty('breadcrumbs')) {
                                route.data.breadcrumbs = route.data.breadcrumbs.replace(":" + key, route.params[key]);
                            }
                            if (route.data.hasOwnProperty('description')) {
                                route.data.description = route.data.description.replace(":" + key, route.params[key]);
                            }
                        }
                    }
                    if (tmpUrl === '/') {
                        paths.push(RoutingService_1.createBreadcrumb(route, tmpUrl));
                    }
                    else {
                        url += tmpUrl;
                        paths.push(RoutingService_1.createBreadcrumb(route, url));
                    }
                }
                _this.onChange.next(paths);
            }
        });
    };
    var RoutingService_1;
    RoutingService.ctorParameters = function () { return [
        { type: Router }
    ]; };
    RoutingService = RoutingService_1 = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [Router])
    ], RoutingService);
    return RoutingService;
}());

/*
 *
 */
var BreadcrumbsComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param routingService [description]
     * @param changeDetectorRef [description]
     */
    function BreadcrumbsComponent(routingService, changeDetectorRef) {
        this.routingService = routingService;
        this.changeDetectorRef = changeDetectorRef;
        this.homeIcon = 'fa fa-home';
    }
    /**
     * @method ngOnInit
     */
    BreadcrumbsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription = this.routingService.onChange.subscribe(function (value) {
            _this.breadcrumbs = value;
        });
    };
    /**
     * @method ngOnDestroy
     */
    BreadcrumbsComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    BreadcrumbsComponent.ctorParameters = function () { return [
        { type: RoutingService },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BreadcrumbsComponent.prototype, "homeIcon", void 0);
    BreadcrumbsComponent = __decorate([
        Component({
            selector: 'mk-breadcrumbs',
            template: "\n<ol class=\"breadcrumb\">\n  <li *ngFor=\"let breadcrumb of breadcrumbs; let first = first; let last = last\" [class.active]=\"last || !breadcrumb.url\">\n    <a *ngIf=\"breadcrumb.url && !last; else noLink\" [routerLink]=\"breadcrumb.url\">\n      <i *ngIf=\"first\" ngClass=\"{{homeIcon}}\"></i>\n      <ng-template [ngIf]=\"breadcrumb.data.breadcrumbs\">{{breadcrumb.data.breadcrumbs}}</ng-template>\n      <ng-template [ngIf]=\"!breadcrumb.data.breadcrumbs\">{{breadcrumb.data.title}}</ng-template>\n    </a>\n    <ng-template #noLink>\n      <i *ngIf=\"first\" ngClass=\"{{homeIcon}}\"></i>\n      <ng-template [ngIf]=\"breadcrumb.data.breadcrumbs\">{{breadcrumb.data.breadcrumbs}}</ng-template>\n      <ng-template [ngIf]=\"!breadcrumb.data.breadcrumbs\">{{breadcrumb.data.title}}</ng-template>\n    </ng-template>\n  </li>\n</ol>\n",
            styles: [".breadcrumb{float:right;background:0 0;margin-top:0;margin-bottom:0;font-size:12px;padding:7px 5px;position:absolute;top:15px;right:10px;border-radius:2px}.breadcrumb>li>a{color:#444;text-decoration:none;display:inline-block}.breadcrumb>li .fa,.breadcrumb>li .glyphicon,.breadcrumb>li .ion{margin-right:5px}"]
        }),
        __metadata("design:paramtypes", [RoutingService,
            ChangeDetectorRef])
    ], BreadcrumbsComponent);
    return BreadcrumbsComponent;
}());

var BreadcrumbsModule = /** @class */ (function () {
    function BreadcrumbsModule() {
    }
    BreadcrumbsModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            exports: [BreadcrumbsComponent],
            declarations: [BreadcrumbsComponent]
        })
    ], BreadcrumbsModule);
    return BreadcrumbsModule;
}());

/*
 *
 */
var LayoutStore = /** @class */ (function () {
    /**
     * @method constructor
     * @param layoutConfig [description]
     */
    function LayoutStore(layoutConfig) {
        this.initialLayoutState = {
            isSidebarLeftCollapsed: false,
            isSidebarLeftExpandOnOver: false,
            isSidebarLeftMouseOver: false,
            isSidebarLeftMini: true,
            sidebarRightSkin: 'dark',
            isSidebarRightCollapsed: true,
            isSidebarRightOverContent: true,
            layout: 'normal',
            sidebarLeftMenu: [],
            sidebarLeftMenuActiveUrl: '',
            skin: 'blue'
        };
        if (layoutConfig) {
            this.initialLayoutState = Object.assign(this.initialLayoutState, layoutConfig);
        }
        this.state = new BehaviorSubject(this.initialLayoutState);
        this.layoutState = this.state.asObservable();
    }
    Object.defineProperty(LayoutStore.prototype, "windowInnerHeight", {
        /**
         * [windowInnerHeight description]
         * @method windowInnerHeight
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('windowInnerHeight'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "windowInnerWidth", {
        /**
         * [windowInnerWidth description]
         * @method windowInnerWidth
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('windowInnerWidth'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftCollapsed", {
        /**
         * [isSidebarLeftCollapsed description]
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('isSidebarLeftCollapsed'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftExpandOnOver", {
        /**
         * [isSidebarLeftExpandOnOver description]
         * @method isSidebarLeftExpandOnOver
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('isSidebarLeftExpandOnOver'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftMouseOver", {
        /**
         * [isSidebarLeftMouseOver description]
         * @method isSidebarLeftMouseOver
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('isSidebarLeftMouseOver'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftMini", {
        /**
         * [isSidebarLeftMini description]
         * @method isSidebarLeftMini
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('isSidebarLeftMini'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarRightSkin", {
        /**
         * [sidebarRightSkin description]
         * @method sidebarRightSkin
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('sidebarRightSkin'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarRightCollapsed", {
        /**
         * [isSidebarRightCollapsed description]
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('isSidebarRightCollapsed'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarRightOverContent", {
        /**
         * [isSidebarRightOverContent description]
         * @method isSidebarRightOverContent
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('isSidebarRightOverContent'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarLeftMenu", {
        /**
         * [sidebarLeftMenu description]
         * @method sidebarLeftMenu
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('sidebarLeftMenu'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarLeftMenuActiveUrl", {
        /**
         * [sidebarLeftMenuActiveUrl description]
         * @method sidebarLeftMenuActiveUrl
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('sidebarLeftMenuActiveUrl'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarLeftElementHeight", {
        /**
         * [sidebarLeftElementHeight description]
         * @method sidebarLeftElementHeight
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('sidebarLeftElementHeight'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "layout", {
        /**
         * [layoutType description]
         * @method layoutType
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('layout'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "skin", {
        /**
         * [skin description]
         * @method skin
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('skin'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "wrapperClasses", {
        /**
         * [wrapperClasses description]
         * @method wrapperClasses
         * @return [description]
         */
        get: function () {
            return this.layoutState.pipe(pluck('wrapperClasses'), distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [sidebarLeftCollapsed description]
     * @method sidebarLeftCollapsed
     * @param value [description]
     */
    LayoutStore.prototype.sidebarLeftCollapsed = function (value) {
        this.state.next(Object.assign(this.state.value, { isSidebarLeftCollapsed: value }));
    };
    /**
     * [sidebarLeftExpandOnOver description]
     * @method sidebarLeftExpandOnOver
     * @param value [description]
     */
    LayoutStore.prototype.sidebarLeftExpandOnOver = function (value) {
        this.state.next(Object.assign(this.state.value, { isSidebarLeftExpandOnOver: value }));
    };
    /**
     * [setSidebarLeftElementHeight description]
     * @method setSidebarLeftElementHeight
     * @param value [description]
     */
    LayoutStore.prototype.setSidebarLeftElementHeight = function (value) {
        this.state.next(Object.assign(this.state.value, { sidebarLeftElementHeight: value }));
    };
    /**
     * [setSidebarRightSkin description]
     * @method setSidebarRightSkin
     * @param value [description]
     */
    LayoutStore.prototype.setSidebarRightSkin = function (value) {
        this.state.next(Object.assign(this.state.value, { sidebarRightSkin: value }));
    };
    /**
     * [sidebarLeftMouseOver description]
     * @method sidebarLeftMouseOver
     * @param value [description]
     */
    LayoutStore.prototype.sidebarLeftMouseOver = function (value) {
        this.state.next(Object.assign(this.state.value, { isSidebarLeftMouseOver: value }));
    };
    /**
     * [sidebarLeftMini description]
     * @method sidebarLeftMini
     * @param value [description]
     */
    LayoutStore.prototype.sidebarLeftMini = function (value) {
        this.state.next(Object.assign(this.state.value, { isSidebarLeftMini: value }));
    };
    /**
     * [sidebarRightCollapsed description]
     * @method sidebarRightCollapsed
     * @param value [description]
     */
    LayoutStore.prototype.sidebarRightCollapsed = function (value) {
        this.state.next(Object.assign(this.state.value, { isSidebarRightCollapsed: value }));
    };
    /**
     * [sidebarRightOverContent description]
     * @method sidebarRightOverContent
     * @param value [description]
     */
    LayoutStore.prototype.sidebarRightOverContent = function (value) {
        this.state.next(Object.assign(this.state.value, { isSidebarRightOverContent: value }));
    };
    /**
     * [setSidebarLeftMenu description]
     * @method setSidebarLeftMenu
     * @param value [description]
     */
    LayoutStore.prototype.setSidebarLeftMenu = function (value) {
        this.state.next(Object.assign(this.state.value, { sidebarLeftMenu: value }));
    };
    /**
     * [setSidebarLeftMenuActiveUrl description]
     * @method setSidebarLeftMenuActiveUrl
     * @param value [description]
     */
    LayoutStore.prototype.setSidebarLeftMenuActiveUrl = function (value) {
        this.state.next(Object.assign(this.state.value, { sidebarLeftMenuActiveUrl: value }));
    };
    /**
     * [setLayout description]
     * @method setLayout
     * @param value [description]
     */
    LayoutStore.prototype.setLayout = function (value) {
        this.state.next(Object.assign(this.state.value, { layout: value }));
    };
    /**
     * [setSkin description]
     * @method setSkin
     * @param value [description]
     */
    LayoutStore.prototype.setSkin = function (value) {
        this.state.next(Object.assign(this.state.value, { skin: value }));
    };
    /**
     * [setWrapperClasses description]
     * @method setWrapperClasses
     * @param value [description]
     */
    LayoutStore.prototype.setWrapperClasses = function (value) {
        this.state.next(Object.assign(this.state.value, { wrapperClasses: value }));
    };
    /**
     * [setWindowInnerHeight description]
     * @method setWindowInnerHeight
     * @param value [description]
     */
    LayoutStore.prototype.setWindowInnerHeight = function (value) {
        this.state.next(Object.assign(this.state.value, { windowInnerHeight: value }));
    };
    /**
     * [setWindowInnerWidth description]
     * @method setWindowInnerWidth
     * @param value [description]
     */
    LayoutStore.prototype.setWindowInnerWidth = function (value) {
        this.state.next(Object.assign(this.state.value, { windowInnerWidth: value }));
    };
    return LayoutStore;
}());

var SidebarRightService = /** @class */ (function () {
    function SidebarRightService() {
    }
    Object.defineProperty(SidebarRightService.prototype, "scrollHeight", {
        /**
         * [scrollHeight description]
         * @method scrollHeight
         * @return [description]
         */
        get: function () {
            return this.elementRef ? this.elementRef.nativeElement.scrollHeight : null;
        },
        enumerable: true,
        configurable: true
    });
    SidebarRightService = __decorate([
        Injectable()
    ], SidebarRightService);
    return SidebarRightService;
}());

var HeaderService = /** @class */ (function () {
    function HeaderService() {
    }
    Object.defineProperty(HeaderService.prototype, "offsetHeight", {
        /**
         * [offsetHeight description]
         * @method offsetHeight
         * @return [description]
         */
        get: function () {
            return this.elementRef ? this.elementRef.nativeElement.offsetHeight : 0;
        },
        enumerable: true,
        configurable: true
    });
    HeaderService = __decorate([
        Injectable()
    ], HeaderService);
    return HeaderService;
}());

var FooterService = /** @class */ (function () {
    function FooterService() {
    }
    Object.defineProperty(FooterService.prototype, "offsetHeight", {
        /**
         * [offsetHeight description]
         * @method offsetHeight
         * @return [description]
         */
        get: function () {
            return this.elementRef ? this.elementRef.nativeElement.offsetHeight : 0;
        },
        enumerable: true,
        configurable: true
    });
    FooterService = __decorate([
        Injectable()
    ], FooterService);
    return FooterService;
}());

/**
 * [throttle description]
 * @method throttle
 * @param callback [description]
 * @param delay    [description]
 * @return [description]
 */
function throttle(callback, delay) {
    var _this = this;
    var timeout = null;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!timeout) {
            timeout = setTimeout(function () {
                callback.call.apply(callback, __spread([_this], args));
                timeout = null;
            }, delay);
        }
    };
}
/**
 * [removeSubscriptions description]
 * @method removeSubscriptions
 */
function removeSubscriptions(subscriptions) {
    if (subscriptions) {
        subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
    }
    return [];
}
/**
 * [removeListeners description]
 * @method removeListeners
 */
function removeListeners(listeners) {
    if (listeners) {
        listeners.forEach(function (listener) {
            listener();
        });
    }
    return [];
}

var ContentComponent = /** @class */ (function () {
    function ContentComponent(layoutStore, routingService, titleService, elementRef, changeDetectorRef, sidebarRightService, headerService, footerService, router) {
        this.layoutStore = layoutStore;
        this.routingService = routingService;
        this.titleService = titleService;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.sidebarRightService = sidebarRightService;
        this.headerService = headerService;
        this.footerService = footerService;
        this.router = router;
        this.subscriptions = [];
    }
    /**
     * @method ngOnInit
     */
    ContentComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.titleTag = this.titleService.getTitle();
        this.subscriptions.push(this.routingService.onChange.subscribe(function (value) {
            if (value && value[value.length - 1] && value[value.length - 1].data) {
                var data = value[value.length - 1].data;
                _this.titleService.setTitle(_this.getTitle(data.title));
                _this.header = data.title;
                _this.description = data.description;
            }
            _this.changeDetectorRef.markForCheck();
        }));
        this.subscriptions.push(this.router.events.subscribe(function (routeEvent) {
            if (routeEvent instanceof NavigationStart) {
                _this.navigationEnd = false;
            }
            if (routeEvent instanceof NavigationEnd) {
                _this.navigationEnd = true;
                _this.setContentMinHeight();
            }
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftElementHeight.subscribe(function (value) {
            _this.sidebarLeftHeight = value;
            _this.setContentMinHeight();
        }));
        this.subscriptions.push(this.layoutStore.layout.subscribe(function (value) {
            _this.layout = value;
            _this.setContentMinHeight();
        }));
        this.subscriptions.push(this.layoutStore.windowInnerHeight.subscribe(function (value) {
            _this.windowInnerHeight = value;
            _this.setContentMinHeight();
        }));
        this.heightStyle = this.windowInnerHeight;
    };
    /**
     * @method ngOnDestroy
     */
    ContentComponent.prototype.ngOnDestroy = function () {
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    Object.defineProperty(ContentComponent.prototype, "scrollHeight", {
        /**
         * [scrollHeight description]
         * @method scrollHeight
         * @return [description]
         */
        get: function () {
            return this.contentInnerElement.nativeElement.scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [getTitle description]
     * @method getTitle
     * @param title [description]
     * @return [description]
     */
    ContentComponent.prototype.getTitle = function (title) {
        return title ? title + " - " + this.titleTag : this.titleTag;
    };
    /**
     * [setMinHeight description]
     * @method setMinHeight
     */
    ContentComponent.prototype.setContentMinHeight = function () {
        if (this.navigationEnd) {
            var heightStyle = void 0;
            var headerFooterOffsetHeight = this.headerService.offsetHeight + this.footerService.offsetHeight;
            if (this.layout === 'fixed') {
                heightStyle = this.windowInnerHeight - this.footerService.offsetHeight;
            }
            else {
                var sidebarRight = this.sidebarRightService.scrollHeight ?
                    this.sidebarRightService.scrollHeight - this.headerService.offsetHeight : 0;
                heightStyle = Math.max(this.windowInnerHeight - headerFooterOffsetHeight, this.sidebarLeftHeight - this.headerService.offsetHeight, sidebarRight);
            }
            if (heightStyle && heightStyle !== this.heightStyle) {
                if (this.scrollHeight > heightStyle) {
                    heightStyle = null;
                }
                this.heightStyle = heightStyle;
                this.changeDetectorRef.detectChanges();
            }
        }
    };
    ContentComponent.ctorParameters = function () { return [
        { type: LayoutStore },
        { type: RoutingService },
        { type: Title },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: SidebarRightService },
        { type: HeaderService },
        { type: FooterService },
        { type: Router }
    ]; };
    __decorate([
        ViewChild('contentInnerElement', { static: true }),
        __metadata("design:type", ElementRef)
    ], ContentComponent.prototype, "contentInnerElement", void 0);
    ContentComponent = __decorate([
        Component({
            selector: 'mk-layout-content',
            template: "<div class=\"content-wrapper\" [style.min-height.px]=\"heightStyle\">\n  <div #contentInnerElement class=\"content-inner\">\n    <ng-content select=\"[mk-layout-content-before-header]\"></ng-content>\n    <section *ngIf=\"header || description\" class=\"content-header\">\n      <h1>\n        {{header}}\n        <small *ngIf=\"description\">{{description}}</small>\n      </h1>\n      <mk-breadcrumbs></mk-breadcrumbs>\n    </section>\n    <ng-content select=\"[mk-layout-content-after-header]\"></ng-content>\n    <section class=\"content\">\n      <ng-content></ng-content>\n    </section>\n  </div>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block}.content-wrapper{position:relative}"]
        }),
        __metadata("design:paramtypes", [LayoutStore,
            RoutingService,
            Title,
            ElementRef,
            ChangeDetectorRef,
            SidebarRightService,
            HeaderService,
            FooterService,
            Router])
    ], ContentComponent);
    return ContentComponent;
}());

var ContentModule = /** @class */ (function () {
    function ContentModule() {
    }
    ContentModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, BreadcrumbsModule],
            exports: [ContentComponent],
            declarations: [ContentComponent]
        })
    ], ContentModule);
    return ContentModule;
}());

/**
 * Footer Left
 */
var FooterLeftComponent = /** @class */ (function () {
    function FooterLeftComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], FooterLeftComponent.prototype, "templateRef", void 0);
    FooterLeftComponent = __decorate([
        Component({
            selector: 'mk-layout-footer-left',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], FooterLeftComponent);
    return FooterLeftComponent;
}());
/**
 * Footer Right
 */
var FooterRightComponent = /** @class */ (function () {
    function FooterRightComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], FooterRightComponent.prototype, "templateRef", void 0);
    FooterRightComponent = __decorate([
        Component({
            selector: 'mk-layout-footer-right',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], FooterRightComponent);
    return FooterRightComponent;
}());
var FooterComponent = /** @class */ (function () {
    function FooterComponent(elementRef, footerService) {
        this.elementRef = elementRef;
        this.footerService = footerService;
    }
    FooterComponent.prototype.ngOnInit = function () {
        this.footerService.elementRef = this.elementRef;
    };
    FooterComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FooterService }
    ]; };
    __decorate([
        ContentChild(FooterLeftComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", FooterLeftComponent)
    ], FooterComponent.prototype, "footerLeftComponent", void 0);
    __decorate([
        ContentChild(FooterRightComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", FooterRightComponent)
    ], FooterComponent.prototype, "footerRightComponent", void 0);
    FooterComponent = __decorate([
        Component({
            selector: 'mk-layout-footer',
            template: "<footer class=\"main-footer\">\n  <div class=\"pull-right hidden-xs\">\n    <ng-template [ngTemplateOutlet]=\"footerRightComponent?.templateRef\"></ng-template>\n  </div>\n  <ng-template [ngTemplateOutlet]=\"footerLeftComponent?.templateRef\"></ng-template>\n</footer>\n",
            styles: [":host{display:block}"]
        }),
        __metadata("design:paramtypes", [ElementRef,
            FooterService])
    ], FooterComponent);
    return FooterComponent;
}());

var FooterModule = /** @class */ (function () {
    function FooterModule() {
    }
    FooterModule = __decorate([
        NgModule({
            imports: [CommonModule],
            exports: [FooterComponent, FooterLeftComponent, FooterRightComponent],
            declarations: [FooterComponent, FooterLeftComponent, FooterRightComponent]
        })
    ], FooterModule);
    return FooterModule;
}());

/**
 * Header Logo
 */
var HeaderLogoComponent = /** @class */ (function () {
    function HeaderLogoComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], HeaderLogoComponent.prototype, "templateRef", void 0);
    HeaderLogoComponent = __decorate([
        Component({
            selector: 'mk-layout-header-logo',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], HeaderLogoComponent);
    return HeaderLogoComponent;
}());
/**
 * Header Logo Mini
 */
var HeaderLogoMiniComponent = /** @class */ (function () {
    function HeaderLogoMiniComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], HeaderLogoMiniComponent.prototype, "templateRef", void 0);
    HeaderLogoMiniComponent = __decorate([
        Component({
            selector: 'mk-layout-header-logo-mini',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], HeaderLogoMiniComponent);
    return HeaderLogoMiniComponent;
}());
/**
 * Header
 */
var HeaderComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param layoutStore [description]
     * @param ngZone      [description]
     * @param renderer2   [description]
     * @param elementRef   [description]
     * @param headerService   [description]
     */
    function HeaderComponent(layoutStore, ngZone, renderer2, elementRef, headerService) {
        this.layoutStore = layoutStore;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
        this.headerService = headerService;
        this.listeners = [];
        this.subscriptions = [];
        this.isSidebarLeftToggle = true;
        this.isSidebarRightToggle = true;
        this.logoLink = '/';
    }
    /**
     * @method ngAfterViewInit
     */
    HeaderComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.headerService.elementRef = this.headerElement;
        if (this.sidebarLeftToggleElement) {
            this.subscriptions.push(this.layoutStore.isSidebarLeftCollapsed.subscribe(function (value) {
                _this.isSidebarLeftCollapsed = value;
            }));
            this.ngZone.runOutsideAngular(function () {
                _this.listeners.push(_this.renderer2.listen(_this.sidebarLeftToggleElement.nativeElement, 'click', function (event) {
                    event.preventDefault();
                    _this.layoutStore.sidebarLeftCollapsed(!_this.isSidebarLeftCollapsed);
                }));
            });
        }
        if (this.sidebarRightToggleElement) {
            this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe(function (value) {
                _this.isSidebarRightCollapsed = value;
            }));
            this.ngZone.runOutsideAngular(function () {
                _this.listeners.push(_this.renderer2.listen(_this.sidebarRightToggleElement.nativeElement, 'click', function (event) {
                    event.preventDefault();
                    _this.layoutStore.sidebarRightCollapsed(!_this.isSidebarRightCollapsed);
                }));
            });
        }
    };
    /**
     * @method ngOnDestroy
     */
    HeaderComponent.prototype.ngOnDestroy = function () {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    HeaderComponent.ctorParameters = function () { return [
        { type: LayoutStore },
        { type: NgZone },
        { type: Renderer2 },
        { type: ElementRef },
        { type: HeaderService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], HeaderComponent.prototype, "isSidebarLeftToggle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], HeaderComponent.prototype, "sidebarLeftToggleIconClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], HeaderComponent.prototype, "isSidebarRightToggle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], HeaderComponent.prototype, "sidebarRightToggleIconClasses", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], HeaderComponent.prototype, "logoLink", void 0);
    __decorate([
        ContentChild(HeaderLogoComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", HeaderLogoComponent)
    ], HeaderComponent.prototype, "headerLogoComponent", void 0);
    __decorate([
        ContentChild(HeaderLogoMiniComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", HeaderLogoMiniComponent)
    ], HeaderComponent.prototype, "headerLogoMiniComponent", void 0);
    __decorate([
        ViewChild('headerElement', { static: true }),
        __metadata("design:type", ElementRef)
    ], HeaderComponent.prototype, "headerElement", void 0);
    __decorate([
        ViewChild('sidebarLeftToggleElement'),
        __metadata("design:type", ElementRef)
    ], HeaderComponent.prototype, "sidebarLeftToggleElement", void 0);
    __decorate([
        ViewChild('sidebarRightToggleElement'),
        __metadata("design:type", ElementRef)
    ], HeaderComponent.prototype, "sidebarRightToggleElement", void 0);
    HeaderComponent = __decorate([
        Component({
            selector: 'mk-layout-header',
            template: "<header #headerElement class=\"main-header\">\n  <a [routerLink]=\"logoLink\" class=\"logo\">\n    <span class=\"logo-mini\"><ng-template [ngTemplateOutlet]=\"headerLogoMiniComponent?.templateRef\"></ng-template></span>\n    <span class=\"logo-lg\"><ng-template [ngTemplateOutlet]=\"headerLogoComponent?.templateRef\"></ng-template></span>\n  </a>\n  <nav class=\"navbar navbar-static-top\">\n    <a *ngIf=\"isSidebarLeftToggle\" #sidebarLeftToggleElement href=\"#\" class=\"sidebar-toggle {{sidebarLeftToggleIconClasses ? 'sidebar-toggle-custom-icon' : ''}}\">\n      <span class=\"sr-only\">Toggle navigation</span>\n      <ng-container *ngIf=\"sidebarLeftToggleIconClasses\">\n        <i [class]=\"sidebarLeftToggleIconClasses\"></i>\n      </ng-container>\n    </a>\n    <div *ngIf=\"isSidebarRightToggle\" class=\"sidebar-right-toggle\">\n      <a #sidebarRightToggleElement href=\"#\">\n        <i [class]=\"sidebarRightToggleIconClasses ? sidebarRightToggleIconClasses : 'fa fa-gears'\"></i>\n      </a>\n    </div>\n    <ng-content></ng-content>\n  </nav>\n</header>\n",
            styles: [":host{display:block}.sidebar-right-toggle{float:right}.sidebar-right-toggle a{padding:15px;display:block;line-height:20px;cursor:pointer}.sidebar-toggle-custom-icon:before{content:''}"]
        }),
        __metadata("design:paramtypes", [LayoutStore,
            NgZone,
            Renderer2,
            ElementRef,
            HeaderService])
    ], HeaderComponent);
    return HeaderComponent;
}());

var HeaderModule = /** @class */ (function () {
    function HeaderModule() {
    }
    HeaderModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            exports: [HeaderComponent, HeaderLogoComponent, HeaderLogoMiniComponent],
            declarations: [HeaderComponent, HeaderLogoComponent, HeaderLogoMiniComponent]
        })
    ], HeaderModule);
    return HeaderModule;
}());

/*
 *
 */
var CollapseAnimationDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     * @param ngZone     [description]
     * @param renderer2  [description]
     */
    function CollapseAnimationDirective(elementRef, ngZone, renderer2) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.firstStart = true;
        this.collapseAnimationDuration = 350;
        // tslint:disable-next-line:no-output-rename
        this.startEventEmitter = new EventEmitter();
        // tslint:disable-next-line:no-output-rename
        this.doneEventEmitter = new EventEmitter();
    }
    Object.defineProperty(CollapseAnimationDirective.prototype, "_isCollapsed", {
        set: function (value) {
            this.lastIsCollapsed = this.isCollapsed;
            this.isCollapsed = value;
            if (!this.firstStart) {
                this.emit('start');
                if (value) {
                    this.collapse();
                }
                else if (value === false) {
                    this.unCollapse();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    CollapseAnimationDirective.prototype.ngOnInit = function () {
        if (this.collapseAnimationDuration && this.collapseAnimationDuration !== 350) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-duration', this.collapseAnimationDuration + "ms");
        }
        if (this.collapseAnimationTiming) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-timing-function', this.collapseAnimationTiming);
        }
    };
    /**
     * @method ngAfterContentInit
     */
    CollapseAnimationDirective.prototype.ngAfterContentInit = function () {
        this.emit('start');
        if (this.isCollapsed) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'none');
            this.renderer2.addClass(this.elementRef.nativeElement, 'collapsing');
        }
        this.emit('done');
        this.firstStart = false;
        this.subscriptions();
    };
    /**
     * [ngOnDestroy description]
     * @method ngOnDestroy
     * @return [description]
     */
    CollapseAnimationDirective.prototype.ngOnDestroy = function () {
        if (this.listener) {
            this.listener();
        }
    };
    /**
     * [subscriptions description]
     * @method subscriptions
     */
    CollapseAnimationDirective.prototype.subscriptions = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.listener = _this.renderer2.listen(_this.elementRef.nativeElement, 'transitionend', function () {
                if (!_this.isCollapsed) {
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'un-collapse');
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'collapsing');
                }
                else {
                    _this.renderer2.setStyle(_this.elementRef.nativeElement, 'display', 'none');
                }
                requestAnimationFrame(function () {
                    _this.renderer2.removeStyle(_this.elementRef.nativeElement, 'height');
                    _this.emit('done');
                    _this.transitioning = false;
                });
            });
        });
    };
    /**
     * [unCollapse description]
     * @method unCollapse
     */
    CollapseAnimationDirective.prototype.unCollapse = function () {
        this.transitioning = true;
        this.renderer2.addClass(this.elementRef.nativeElement, 'un-collapse');
        this.renderer2.removeStyle(this.elementRef.nativeElement, 'display');
        this.renderer2.setStyle(this.elementRef.nativeElement, 'height', this.elementRef.nativeElement.scrollHeight + "px");
    };
    /**
     * [collapse description]
     * @method collapse
     */
    CollapseAnimationDirective.prototype.collapse = function () {
        var _this = this;
        requestAnimationFrame(function () {
            if (!_this.transitioning) {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', _this.elementRef.nativeElement.offsetHeight + "px");
                _this.renderer2.addClass(_this.elementRef.nativeElement, 'collapsing');
            }
            _this.transitioning = true;
            requestAnimationFrame(function () {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', "0px");
            });
        });
    };
    CollapseAnimationDirective.prototype.emit = function (phaseName) {
        var event = {
            element: this.elementRef.nativeElement,
            fromState: this.lastIsCollapsed === undefined ? 'void' : this.lastIsCollapsed ? '1' : '0',
            phaseName: phaseName,
            toState: this.isCollapsed === undefined ? 'void' : this.isCollapsed ? '1' : '0',
            totalTime: this.collapseAnimationDuration,
            triggerName: 'mkCollapseAnimation'
        };
        if (phaseName === 'done') {
            this.doneEventEmitter.emit(event);
        }
        else if (phaseName === 'start') {
            this.startEventEmitter.emit(event);
        }
    };
    CollapseAnimationDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CollapseAnimationDirective.prototype, "collapseAnimationDuration", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CollapseAnimationDirective.prototype, "collapseAnimationTiming", void 0);
    __decorate([
        Input('mkCollapseAnimation'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], CollapseAnimationDirective.prototype, "_isCollapsed", null);
    __decorate([
        Output('mkCollapseAnimation.start'),
        __metadata("design:type", Object)
    ], CollapseAnimationDirective.prototype, "startEventEmitter", void 0);
    __decorate([
        Output('mkCollapseAnimation.done'),
        __metadata("design:type", Object)
    ], CollapseAnimationDirective.prototype, "doneEventEmitter", void 0);
    CollapseAnimationDirective = __decorate([
        Directive({
            selector: '[mkCollapseAnimation]'
        }),
        __metadata("design:paramtypes", [ElementRef,
            NgZone,
            Renderer2])
    ], CollapseAnimationDirective);
    return CollapseAnimationDirective;
}());

var AnimationsModule = /** @class */ (function () {
    function AnimationsModule() {
    }
    AnimationsModule = __decorate([
        NgModule({
            exports: [CollapseAnimationDirective],
            declarations: [CollapseAnimationDirective]
        })
    ], AnimationsModule);
    return AnimationsModule;
}());

/*
 *
 */
var SidebarLeftToggleDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     */
    function SidebarLeftToggleDirective(elementRef) {
        this.elementRef = elementRef;
    }
    SidebarLeftToggleDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input('mkMenuToggle'),
        __metadata("design:type", Object)
    ], SidebarLeftToggleDirective.prototype, "item", void 0);
    SidebarLeftToggleDirective = __decorate([
        Directive({
            selector: '[mkMenuToggle]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SidebarLeftToggleDirective);
    return SidebarLeftToggleDirective;
}());

var WrapperService = /** @class */ (function () {
    function WrapperService() {
    }
    WrapperService = __decorate([
        Injectable()
    ], WrapperService);
    return WrapperService;
}());

var SidebarLeftComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param  changeDetectorRef  [description]
     * @param  layoutStore        [description]
     * @param  ngZone             [description]
     * @param  renderer2          [description]
     * @param  router             [description]
     * @param  routingService     [description]
     * @param  wrapperService     [description]
     * @param  headerService      [description]
     */
    function SidebarLeftComponent(changeDetectorRef, layoutStore, ngZone, renderer2, router, routingService, wrapperService, headerService) {
        this.changeDetectorRef = changeDetectorRef;
        this.layoutStore = layoutStore;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.router = router;
        this.routingService = routingService;
        this.wrapperService = wrapperService;
        this.headerService = headerService;
        this.collapsedItems = [];
        this.activatedItems = [];
        this.toggleListeners = [];
        this.listeners = [];
        this.itemsByIds = {};
        this.runningAnimations = 0;
        this.subscriptions = [];
    }
    /**
     * @method ngOnInit
     */
    SidebarLeftComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe(function (value) {
            _this.menu = value;
            _this.monkeyPatchMenu(_this.menu);
            if (_this.initialized) {
                _this.setMenuListeners(_this.activeUrl);
                _this.setSidebarListeners();
                _this.setMenuTogglesListeners();
            }
            _this.initialized = true;
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftMenuActiveUrl.subscribe(function (value) {
            _this.activeUrl = value;
            _this.setMenuListeners(value);
        }));
        this.subscriptions.push(this.routingService.events.subscribe(function (event) {
            if (event instanceof NavigationEnd) {
                _this.activeUrl = event.url;
                _this.setMenuListeners(event.url);
            }
        }));
        this.setSidebarListeners();
    };
    /**
     * @method ngAfterViewInit
     */
    SidebarLeftComponent.prototype.ngAfterViewInit = function () {
        this.setMenuTogglesListeners();
        this.checkMenuWithoutChildren();
    };
    /**
     * @method ngOnDestroy
     */
    SidebarLeftComponent.prototype.ngOnDestroy = function () {
        this.subscriptions = removeSubscriptions(this.subscriptions);
        this.listeners = removeListeners(this.listeners);
        this.toggleListeners = removeListeners(this.toggleListeners);
    };
    /**
     * [setSidebarListeners description]
     * @method setSidebarListeners
     */
    SidebarLeftComponent.prototype.setSidebarListeners = function () {
        var _this = this;
        this.subscriptions.push(this.layoutStore.layout.subscribe(function (value) {
            _this.layout = value;
            _this.setSidebarHeight();
        }));
        this.subscriptions.push(this.layoutStore.windowInnerHeight.subscribe(function (value) {
            _this.windowInnerHeight = value;
            _this.setSidebarHeight();
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe(function () {
            _this.changeDetectorRef.detectChanges();
        }));
        this.ngZone.runOutsideAngular(function () {
            _this.listeners.push(_this.renderer2.listen(_this.sidebarElement.nativeElement, 'mouseenter', function () {
                _this.layoutStore.sidebarLeftMouseOver(true);
            }));
            _this.listeners.push(_this.renderer2.listen(_this.sidebarElement.nativeElement, 'mouseleave', function () {
                _this.layoutStore.sidebarLeftMouseOver(false);
            }));
        });
        this.subscriptions.push(this.layoutStore.windowInnerWidth.subscribe(function (value) {
            _this.windowInnerWidth = value;
            if (!_this.isSidebarLeftCollapsed && _this.windowInnerWidth <= 767) {
                _this.layoutStore.sidebarLeftCollapsed(true);
            }
            else if (_this.windowInnerWidth > 767 && _this.isSidebarLeftCollapsed && !_this.isSidebarLeftExpandOnOver) {
                _this.layoutStore.sidebarLeftCollapsed(false);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMouseOver.subscribe(function (value) {
            _this.isSidebarLeftMouseOver = value;
            if (_this.isSidebarLeftExpandOnOver) {
                _this.layoutStore.sidebarLeftCollapsed(!value);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftExpandOnOver.subscribe(function (value) {
            _this.isSidebarLeftExpandOnOver = value;
            if (_this.windowInnerWidth > 767 && _this.isSidebarLeftCollapsed !== undefined) {
                _this.layoutStore.sidebarLeftCollapsed(value);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftCollapsed.subscribe(function (value) {
            _this.isSidebarLeftCollapsed = value;
            if (_this.windowInnerWidth <= 767) {
                if (value) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
                else {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
            }
            else {
                if (_this.isSidebarLeftExpandOnOver && !_this.isSidebarLeftMouseOver && !value) {
                    _this.layoutStore.sidebarLeftExpandOnOver(false);
                }
                if (value) {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (_this.isSidebarLeftExpandOnOver) {
                        _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
                else {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (_this.isSidebarLeftExpandOnOver) {
                        _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMini.subscribe(function (value) {
            if (value) {
                _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
            else {
                _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
        }));
    };
    /**
     * [setMenuListeners description]
     * @method setMenuListeners
     */
    SidebarLeftComponent.prototype.setMenuListeners = function (url) {
        if (url === '/') {
            this.activeItems(url);
            this.changeDetectorRef.detectChanges();
        }
        else {
            var primaryOutlet = this.router.parseUrl(url).root.children[PRIMARY_OUTLET];
            if (primaryOutlet) {
                this.activeItems(primaryOutlet.toString());
                this.changeDetectorRef.detectChanges();
            }
        }
        if (this.windowInnerWidth <= 767 || this.isSidebarLeftExpandOnOver) {
            this.layoutStore.sidebarLeftCollapsed(true);
        }
    };
    /**
     * [getIconClasses description]
     * @method getIconClasses
     * @param item [description]
     * @return [description]
     */
    SidebarLeftComponent.prototype.getIconClasses = function (item) {
        if (item.iconClasses || item.iconClasses === '') {
            return item.iconClasses;
        }
        else {
            return 'fa fa-circle-o';
        }
    };
    /**
     * [visibilityStateStart description]
     * @method visibilityStateStart
     * @param event [description]
     */
    SidebarLeftComponent.prototype.visibilityStateStart = function (event) {
        var _this = this;
        this.runningAnimations++;
        this.ngZone.runOutsideAngular(function () {
            setTimeout(function () {
                _this.runningAnimations--;
                if (!_this.runningAnimations) {
                    _this.layoutStore.setSidebarLeftElementHeight(_this.sidebarElement.nativeElement.offsetHeight);
                }
            }, event.totalTime);
        });
    };
    /**
     * [uncollapseItemParents description]
     * @method uncollapseItemParents
     * @param item           [description]
     * @param isActive       [description]
     */
    SidebarLeftComponent.prototype.uncollapseItemParents = function (item, isActive) {
        if (isActive === void 0) { isActive = false; }
        if (isActive) {
            item.isActive = true;
            this.activatedItems.push(item);
        }
        item.isCollapsed = false;
        this.collapsedItems.push(item);
        if (item.parentId) {
            this.uncollapseItemParents(this.itemsByIds[item.parentId], isActive);
        }
    };
    /**
     * [findItemsByUrl description]
     * @method findItemsByUrl
     * @param url   [description]
     * @param items [description]
     * @param returnItems [description]
     * @return [description]
     */
    SidebarLeftComponent.prototype.findItemsByUrl = function (url, items, returnItems) {
        var _this = this;
        if (returnItems === void 0) { returnItems = []; }
        items.forEach(function (item) {
            if (item.route === url) {
                returnItems.push(item);
            }
            else if (item.children) {
                _this.findItemsByUrl(url, item.children, returnItems);
            }
        });
        return returnItems;
    };
    /**
     * [activeItems description]
     * @method activeItems
     * @param url [description]
     */
    SidebarLeftComponent.prototype.activeItems = function (url) {
        var _this = this;
        this.activatedItems.forEach(function (item) {
            item.isActive = false;
        });
        this.activatedItems = [];
        this.collapsedItems.forEach(function (item) {
            item.isActive = false;
            item.isCollapsed = true;
        });
        this.collapsedItems = [];
        var items = this.findItemsByUrl(url, this.menu);
        items.forEach(function (item) {
            item.isActive = true;
            _this.uncollapseItemParents(item, true);
            _this.activatedItems.push(item);
        });
    };
    /**
     * [monkeyPatchMenu description]
     * @method monkeyPatchMenu
     * @param items    [description]
     * @param parentId [description]
     */
    SidebarLeftComponent.prototype.monkeyPatchMenu = function (items, parentId) {
        var _this = this;
        items.forEach(function (item, index) {
            item.id = parentId ? Number(parentId + '' + (index + 1)) : index + 1;
            if (parentId) {
                item.parentId = parentId;
            }
            if (!item.disableCollapse) {
                item.isCollapsed = true;
            }
            item.isActive = false;
            if (parentId || item.children) {
                _this.itemsByIds[item.id] = item;
            }
            if (item.children) {
                _this.monkeyPatchMenu(item.children, item.id);
            }
        });
    };
    /**
     * [setMenuTogglesListeners description]
     * @method setMenuTogglesListeners
     */
    SidebarLeftComponent.prototype.setMenuTogglesListeners = function () {
        var _this = this;
        this.toggleListeners = removeListeners(this.toggleListeners);
        this.ngZone.runOutsideAngular(function () {
            _this.sidebarLeftToggleDirectives.forEach(function (menuToggle) {
                _this.toggleListeners.push(_this.renderer2.listen(menuToggle.elementRef.nativeElement, 'click', function (event) {
                    event.preventDefault();
                    if (menuToggle.item.isCollapsed) {
                        _this.collapsedItems.forEach(function (item) {
                            if (!item.disableCollapse) {
                                item.isCollapsed = true;
                            }
                        });
                        _this.collapsedItems = [];
                        _this.uncollapseItemParents(menuToggle.item);
                    }
                    else {
                        menuToggle.item.isCollapsed = !menuToggle.item.isCollapsed;
                    }
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        });
    };
    /**
     * [checkMenuWithoutChildren description]
     * @method checkMenuWithoutChildren
     */
    SidebarLeftComponent.prototype.checkMenuWithoutChildren = function () {
        var _this = this;
        var menuHaveChildren;
        this.menu.forEach(function (item) {
            if (item.children) {
                return menuHaveChildren = true;
            }
        });
        if (!menuHaveChildren) {
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.layoutStore.setSidebarLeftElementHeight(_this.sidebarElement.nativeElement.offsetHeight);
                });
            });
        }
    };
    /**
     * [setSidebarHeight description]
     * @method setSidebarHeight
     */
    SidebarLeftComponent.prototype.setSidebarHeight = function () {
        if (this.layout === 'fixed') {
            var height = this.windowInnerHeight - this.headerService.offsetHeight;
            if (height && height !== this.sidebarHeight) {
                this.sidebarHeight = height;
                this.sidebarOverflow = 'auto';
                this.changeDetectorRef.detectChanges();
            }
        }
        else if (this.sidebarHeight) {
            this.sidebarOverflow = this.sidebarHeight = null;
            this.changeDetectorRef.detectChanges();
        }
    };
    SidebarLeftComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: LayoutStore },
        { type: NgZone },
        { type: Renderer2 },
        { type: Router },
        { type: RoutingService },
        { type: WrapperService },
        { type: HeaderService }
    ]; };
    __decorate([
        ViewChild('sidebarElement', { static: true }),
        __metadata("design:type", ElementRef)
    ], SidebarLeftComponent.prototype, "sidebarElement", void 0);
    __decorate([
        ViewChildren(SidebarLeftToggleDirective),
        __metadata("design:type", QueryList)
    ], SidebarLeftComponent.prototype, "sidebarLeftToggleDirectives", void 0);
    SidebarLeftComponent = __decorate([
        Component({
            selector: 'mk-layout-sidebar-left',
            template: "<aside class=\"main-sidebar\">\n  <section class=\"sidebar\" #sidebarElement [style.height.px]=\"sidebarHeight\" [style.overflow]=\"sidebarOverflow\">\n    <ng-content></ng-content>\n  \t<ul class=\"sidebar-menu\">\n      <ng-container *ngFor=\"let item of menu\">\n        <ng-container *ngTemplateOutlet=\"sidebarInner; context: {item: item}\"></ng-container>\n      </ng-container>\n  \t</ul>\n  </section>\n</aside>\n\n<ng-template #sidebarInner let-item=\"item\">\n  <li [class.active]=\"item.isActive\" [class.header]=\"item.separator\" [class.menu-open]=\"!item.isCollapsed\">\n    <span *ngIf=\"item.separator\">{{item.label}}</span>\n    <a *ngIf=\"!item.separator && item.route\" [routerLink]=\"item.route\">\n    \t<i [class]=\"getIconClasses(item)\"></i><span>{{item.label}}</span>\n    \t<span *ngIf=\"item.children || item.pullRights\" class=\"pull-right-container\">\n    \t\t<span *ngFor=\"let rightItem of item.pullRights\" class=\"pull-right {{rightItem.classes}}\">{{rightItem.text}}</span>\n    \t  <i *ngIf=\"!item.pullRights\" class=\"fa fa-angle-left pull-right\"></i>\n    \t</span>\n    </a>\n    <a *ngIf=\"!item.separator && !item.route\" href=\"#\" [mkMenuToggle]=\"item\">\n    \t<i [class]=\"getIconClasses(item)\"></i><span>{{item.label}}</span>\n    \t<span *ngIf=\"item.children || item.pullRights\" class=\"pull-right-container\">\n    \t\t<span *ngFor=\"let rightItem of item.pullRights\" class=\"pull-right {{rightItem.classes}}\">{{rightItem.text}}</span>\n    \t  <i *ngIf=\"!item.pullRights\" class=\"fa fa-angle-left pull-right\"></i>\n    \t</span>\n    </a>\n    <ul *ngIf=\"item.children\" [mkCollapseAnimation]=\"item.isCollapsed\" (mkCollapseAnimation.start)=\"visibilityStateStart($event)\" class=\"treeview-menu\">\n      <ng-container *ngFor=\"let item of item.children\">\n        <ng-container *ngTemplateOutlet=\"sidebarInner; context: {item: item}\"></ng-container>\n      </ng-container>\n    </ul>\n  </li>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".treeview-menu.collapse{display:none}.treeview-menu,.treeview-menu.collapse.in{display:block}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            LayoutStore,
            NgZone,
            Renderer2,
            Router,
            RoutingService,
            WrapperService,
            HeaderService])
    ], SidebarLeftComponent);
    return SidebarLeftComponent;
}());

var SidebarLeftModule = /** @class */ (function () {
    function SidebarLeftModule() {
    }
    SidebarLeftModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule, AnimationsModule],
            exports: [SidebarLeftComponent],
            declarations: [SidebarLeftToggleDirective, SidebarLeftComponent]
        })
    ], SidebarLeftModule);
    return SidebarLeftModule;
}());

var SidebarRightComponent = /** @class */ (function () {
    function SidebarRightComponent(elementRef, renderer2, layoutStore, sidebarRightService, wrapperService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.sidebarRightService = sidebarRightService;
        this.wrapperService = wrapperService;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * @method ngOnInit
     */
    SidebarRightComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.renderer2.addClass(this.elementRef.nativeElement, 'control-sidebar');
        this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe(function (value) {
            _this.isSidebarRightCollapsed = value;
            if (!value) {
                _this.renderer2.addClass(_this.elementRef.nativeElement, 'control-sidebar-open');
                if (!_this.isSidebarRightOverContent) {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
            else {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, 'control-sidebar-open');
                if (!_this.isSidebarRightOverContent) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarRightOverContent.subscribe(function (value) {
            _this.isSidebarRightOverContent = value;
            if (!_this.isSidebarRightCollapsed) {
                if (value) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
                else {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.sidebarRightSkin.subscribe(function (value) {
            if (_this.skin !== value) {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, "control-sidebar-" + _this.skin);
            }
            _this.skin = value;
            _this.renderer2.addClass(_this.elementRef.nativeElement, "control-sidebar-" + value);
        }));
    };
    /**
     * @method ngAfterViewInit
     */
    SidebarRightComponent.prototype.ngAfterViewInit = function () {
        this.sidebarRightService.elementRef = this.sidebarContentElement;
    };
    /**
     * @method ngOnDestroy
     */
    SidebarRightComponent.prototype.ngOnDestroy = function () {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    SidebarRightComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: LayoutStore },
        { type: SidebarRightService },
        { type: WrapperService }
    ]; };
    __decorate([
        ViewChild('sidebarContentElement', { static: true }),
        __metadata("design:type", ElementRef)
    ], SidebarRightComponent.prototype, "sidebarContentElement", void 0);
    SidebarRightComponent = __decorate([
        Component({
            selector: 'mk-layout-sidebar-right',
            template: "<div #sidebarContentElement class=\"control-sidebar-content\">\n  <ng-content></ng-content>\n</div>\n<div class=\"control-sidebar-bg\"></div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block;height:100%}.control-sidebar-bg{z-index:-1}/deep/ .tab-content{padding:10px 15px}"]
        }),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            LayoutStore,
            SidebarRightService,
            WrapperService])
    ], SidebarRightComponent);
    return SidebarRightComponent;
}());

var SidebarRightModule = /** @class */ (function () {
    function SidebarRightModule() {
    }
    SidebarRightModule = __decorate([
        NgModule({
            imports: [CommonModule],
            exports: [SidebarRightComponent],
            declarations: [SidebarRightComponent]
        })
    ], SidebarRightModule);
    return SidebarRightModule;
}());

var WrapperComponent = /** @class */ (function () {
    function WrapperComponent(elementRef, renderer2, layoutStore, wrapperService, ngZone) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.wrapperService = wrapperService;
        this.ngZone = ngZone;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * [ngOnInit description]
     * @method ngOnInit
     */
    WrapperComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.layoutStore.setWindowInnerHeight(window.innerHeight);
        this.layoutStore.setWindowInnerWidth(window.innerWidth);
        this.wrapperService.wrapperElementRef = this.elementRef;
        this.subscriptions.push(this.layoutStore.wrapperClasses.subscribe(function (value) {
            _this.classes = value ? value : null;
        }));
        this.ngZone.runOutsideAngular(function () {
            _this.listeners.push(_this.renderer2.listen('window', 'resize', throttle(function () {
                _this.layoutStore.setWindowInnerHeight(window.innerHeight);
                _this.layoutStore.setWindowInnerWidth(window.innerWidth);
            }, 250)));
        });
        this.subscriptions.push(this.layoutStore.layout.subscribe(function (value) {
            value === 'fixed' ? _this.renderer2.addClass(_this.elementRef.nativeElement, 'fixed') :
                _this.renderer2.removeClass(_this.elementRef.nativeElement, 'fixed');
            value === 'boxed' ? _this.renderer2.addClass(_this.elementRef.nativeElement, 'layout-boxed') :
                _this.renderer2.removeClass(_this.elementRef.nativeElement, 'layout-boxed');
        }));
        this.subscriptions.push(this.layoutStore.skin.subscribe(function (value) {
            if (value) {
                if (_this.skin && _this.skin !== value) {
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, "skin-" + _this.skin);
                }
                _this.skin = value;
                _this.renderer2.addClass(_this.elementRef.nativeElement, "skin-" + _this.skin);
            }
        }));
    };
    /**
     * @method ngOnDestroy
     */
    WrapperComponent.prototype.ngOnDestroy = function () {
        this.subscriptions = removeSubscriptions(this.subscriptions);
        this.listeners = removeListeners(this.listeners);
    };
    WrapperComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: LayoutStore },
        { type: WrapperService },
        { type: NgZone }
    ]; };
    WrapperComponent = __decorate([
        Component({
            selector: 'mk-layout-wrapper',
            template: "<div class=\"wrapper overflow\" [ngClass]=\"classes\">\n  <ng-content></ng-content>\n</div>\n",
            styles: [".wrapper.overflow{overflow:hidden}:host{display:block}:host /deep/ .sidebar-right-toggle>a{color:#fff}:host.sidebar-mini.sidebar-collapse /deep/ .treeview-menu.collapsing{height:auto!important}:host /deep/ .sidebar-right-toggle>a:hover{background:rgba(0,0,0,.1)}:host.skin-black /deep/ .sidebar-right-toggle>a,:host.skin-black-light /deep/ .sidebar-right-toggle>a{color:#333;border-right-width:0}:host.skin-black /deep/ .sidebar-right-toggle>a:hover,:host.skin-black-light /deep/ .sidebar-right-toggle>a:hover{background-color:#fff;color:#999}:host.skin-black /deep/ .sidebar-right-toggle>a{border-left:1px solid #eee}:host.skin-black-light /deep/ .sidebar-right-toggle>a{border-left:1px solid #d2d6de}"]
        }),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            LayoutStore,
            WrapperService,
            NgZone])
    ], WrapperComponent);
    return WrapperComponent;
}());

var WrapperModule = /** @class */ (function () {
    function WrapperModule() {
    }
    WrapperModule = __decorate([
        NgModule({
            imports: [CommonModule],
            exports: [WrapperComponent],
            declarations: [WrapperComponent]
        })
    ], WrapperModule);
    return WrapperModule;
}());

var LayoutService = /** @class */ (function () {
    /**
     * @method constructor
     * @param routingService [description]
     */
    function LayoutService(router) {
        this.router = router;
        this.isCustomLayout = new BehaviorSubject(false);
        this.init();
    }
    /**
     * [init description]
     * @method init
     * @return [description]
     */
    LayoutService.prototype.init = function () {
        var _this = this;
        this.router.events.subscribe(function (event) {
            if (event instanceof ActivationStart) {
                _this.customLayout = event.snapshot.data.customLayout;
                _this.isCustomLayout.next(!!_this.customLayout);
            }
        });
    };
    LayoutService.ctorParameters = function () { return [
        { type: Router }
    ]; };
    LayoutService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [Router])
    ], LayoutService);
    return LayoutService;
}());

/**
 * [InjectionToken description]
 */
var LayoutConfigToken = new InjectionToken('layoutConfig');
/**
 * [layoutStoreFactory description]
 */
function layoutStoreFactory(layoutConfig) {
    return new LayoutStore(layoutConfig);
}
/**
 * [layoutProviders description]
 */
function layoutProvider(layoutConfig) {
    return [{
            provide: LayoutStore,
            useFactory: layoutStoreFactory,
            deps: [LayoutConfigToken]
        }, {
            provide: LayoutConfigToken,
            useValue: layoutConfig
        }
    ];
}

var LayoutModule = /** @class */ (function () {
    /**
     * @method constructor
     * @param parentModule [description]
     */
    function LayoutModule(parentModule) {
        if (parentModule) {
            throw new Error('LayoutModule is already loaded. Import it in the AppModule only!');
        }
    }
    LayoutModule_1 = LayoutModule;
    /**
     * [forRoot description]
     * @method forRoot
     * @param  layoutConfig [description]
     * @return [description]
     */
    LayoutModule.forRoot = function (layoutConfig) {
        return {
            ngModule: LayoutModule_1,
            providers: __spread(layoutProvider(layoutConfig), [LayoutService])
        };
    };
    var LayoutModule_1;
    LayoutModule.ctorParameters = function () { return [
        { type: LayoutModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    LayoutModule = LayoutModule_1 = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            exports: [ContentModule, FooterModule, HeaderModule, SidebarLeftModule, SidebarRightModule, WrapperModule],
            providers: [RoutingService, WrapperService, SidebarRightService, HeaderService, FooterService]
        }),
        __param(0, Optional()), __param(0, SkipSelf()),
        __metadata("design:paramtypes", [LayoutModule])
    ], LayoutModule);
    return LayoutModule;
}());

var colorsAliases = [
    'default',
    'primary',
    'danger',
    'warning',
    'info',
    'success'
];
var colors = {
    aqua: '#00c0ef',
    'aqua-active': '#00a7d0',
    black: '#111111',
    'black-active': '#000000',
    blue: '#0073b7',
    'blue-active': '#005384',
    fuchsia: '#f012be',
    'fuchsia-active': '#db0ead',
    green: '#00a65a',
    'green-active': '#008d4c',
    gray: '#d2d6de',
    'gray-active': '#b5bbc8',
    'gray-light': '#f7f7f7',
    'light-blue': '#3c8dbc',
    'light-blue-active': '#357ca5',
    lime: '#01ff70',
    'lime-active': '#00e765',
    maroon: '#d81b60',
    'maroon-active': '#ca195a',
    navy: '#001f3f',
    'navy-active': '#001a35',
    olive: '#3d9970',
    'olive-active': '#368763',
    orange: '#ff851b',
    'orange-active': '#ff7701',
    purple: '#605ca8',
    'purple-active': '#555299',
    red: '#dd4b39',
    'red-active': '#d33724',
    teal: '#39cccc',
    'teal-active': '#30bbbb',
    yellow: '#f39c12',
    'yellow-active': '#db8b0b',
};

/*
 *
 */
var ColorService = /** @class */ (function () {
    /**
     * @method constructor
     * @param renderer2 [description]
     * @param elementRef [description]
     */
    function ColorService(renderer2, elementRef) {
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
    }
    /**
     * [setBackgroundColor description]
     * @method setBackgroundColor
     * @param  color              [description]
     * @param  condition          [description]
     * @param  property           [description]
     * @param  prefix             [description]
     */
    ColorService.prototype.setBackgroundColor = function (color, condition, property, prefix) {
        if (color && condition) {
            this.resetBackgroundColor();
            if (colors[color]) {
                this.renderer2.addClass(this.elementRef.nativeElement, 'bg-color');
                this.currentBackgroundStyle = { property: property, color: colors[color] };
                this.renderer2.setStyle(this.elementRef.nativeElement, property, colors[color]);
            }
            else {
                this.renderer2.removeClass(this.elementRef.nativeElement, 'bg-color');
                if (color.indexOf('#') === 0 || color.indexOf('rgb') === 0) {
                    this.currentBackgroundStyle = { property: property, color: color };
                    this.renderer2.setStyle(this.elementRef.nativeElement, property, color);
                }
                else if (colorsAliases.indexOf(color) !== -1) {
                    this.currentBackgroundClass = prefix ? prefix + "-" + color : color;
                    this.renderer2.addClass(this.elementRef.nativeElement, this.currentBackgroundClass);
                }
            }
        }
    };
    /**
     * [resetBackgroundColor description]
     * @method resetBackgroundColor
     */
    ColorService.prototype.resetBackgroundColor = function () {
        if (this.currentBackgroundStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, this.currentBackgroundStyle.property, this.currentBackgroundStyle.color);
        }
        else if (this.currentBackgroundClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentBackgroundClass);
        }
    };
    /**
     * [setFontColor description]
     * @method setFontColor
     * @param  color        [description]
     */
    ColorService.prototype.setFontColor = function (color) {
        if (color) {
            this.resetFontColor();
            if (color.startsWith('#') || color.startsWith('rgb')) {
                this.currentFontStyle = color;
                this.renderer2.setStyle(this.elementRef.nativeElement, 'color', color);
            }
            else {
                this.currentFontClass = "text-" + color;
                this.renderer2.addClass(this.elementRef.nativeElement, this.currentFontClass);
            }
        }
    };
    /**
     * [resetFontColor description]
     * @method resetFontColor
     * @return [description]
     */
    ColorService.prototype.resetFontColor = function () {
        if (this.currentFontStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, 'color', this.currentFontStyle);
        }
        else if (this.currentFontClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentFontClass);
        }
    };
    ColorService.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    ColorService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [Renderer2,
            ElementRef])
    ], ColorService);
    return ColorService;
}());

var BackgroundColorDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef   [description]
     * @param renderer2    [description]
     * @param colorService [description]
     */
    function BackgroundColorDirective(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
        this.condition = true;
    }
    Object.defineProperty(BackgroundColorDirective.prototype, "setPrefix", {
        set: function (prefix) {
            this.prefix = prefix;
            this.colorService.setBackgroundColor(this.color, this.condition, this.property, this.prefix);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BackgroundColorDirective.prototype, "setColor", {
        set: function (color) {
            this.color = color;
            this.colorService.setBackgroundColor(this.color, this.condition, this.property, this.prefix);
        },
        enumerable: true,
        configurable: true
    });
    BackgroundColorDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ColorService }
    ]; };
    __decorate([
        Input('mkColorCondition'),
        __metadata("design:type", Object)
    ], BackgroundColorDirective.prototype, "condition", void 0);
    __decorate([
        Input('mkColorPrefix'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], BackgroundColorDirective.prototype, "setPrefix", null);
    __decorate([
        Input('mkColorProperty'),
        __metadata("design:type", String)
    ], BackgroundColorDirective.prototype, "property", void 0);
    __decorate([
        Input('mkColor'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], BackgroundColorDirective.prototype, "setColor", null);
    BackgroundColorDirective = __decorate([
        Directive({
            selector: '[mkColor]',
            providers: [ColorService]
        }),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            ColorService])
    ], BackgroundColorDirective);
    return BackgroundColorDirective;
}());
var ColorDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef   [description]
     * @param renderer2    [description]
     * @param colorService [description]
     */
    function ColorDirective(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
    }
    Object.defineProperty(ColorDirective.prototype, "color", {
        set: function (color) {
            this.colorService.setFontColor(color);
        },
        enumerable: true,
        configurable: true
    });
    ColorDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ColorService }
    ]; };
    __decorate([
        Input('mkFontColor'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ColorDirective.prototype, "color", null);
    ColorDirective = __decorate([
        Directive({
            selector: '[mkFontColor]',
            providers: [ColorService]
        }),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            ColorService])
    ], ColorDirective);
    return ColorDirective;
}());

var ColorModule = /** @class */ (function () {
    function ColorModule() {
    }
    ColorModule = __decorate([
        NgModule({
            exports: [BackgroundColorDirective, ColorDirective],
            declarations: [BackgroundColorDirective, ColorDirective]
        })
    ], ColorModule);
    return ColorModule;
}());

/*
 *
 */
var AccordionToggleDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     */
    function AccordionToggleDirective(elementRef) {
        this.elementRef = elementRef;
    }
    AccordionToggleDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input('mkAccordionToggle'),
        __metadata("design:type", Object)
    ], AccordionToggleDirective.prototype, "accordionComponent", void 0);
    AccordionToggleDirective = __decorate([
        Directive({
            selector: '[mkAccordionToggle]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], AccordionToggleDirective);
    return AccordionToggleDirective;
}());

/*
 *
 */
var AccordionHeaderComponent = /** @class */ (function () {
    function AccordionHeaderComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], AccordionHeaderComponent.prototype, "templateRef", void 0);
    AccordionHeaderComponent = __decorate([
        Component({
            selector: 'mk-accordion-header',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], AccordionHeaderComponent);
    return AccordionHeaderComponent;
}());
/*
 *
 */
var AccordionContentComponent = /** @class */ (function () {
    function AccordionContentComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], AccordionContentComponent.prototype, "templateRef", void 0);
    AccordionContentComponent = __decorate([
        Component({
            selector: 'mk-accordion-content',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], AccordionContentComponent);
    return AccordionContentComponent;
}());
/*
 *
 */
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent() {
        this.contentStyleClass = 'box-body';
        this.headerStyleClass = 'box-header with-border';
    }
    /**
     * @method ngOnInit
     */
    AccordionComponent.prototype.ngOnInit = function () {
        this.headerStyleColor = this.headerColor;
        if (!this.header && !this.accordionHeaderComponent) {
            throw new Error('Attribute "header" OR Component "mk-+accordion-header" is required for component "mk-+accordion"');
        }
        if (this.accordionContentComponent) {
            this.contentTemplateRef = this.accordionContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "borderColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "contentColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionComponent.prototype, "contentStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "headerColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "headerColorHover", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionComponent.prototype, "headerStyleClass", void 0);
    __decorate([
        ContentChild(AccordionHeaderComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", AccordionHeaderComponent)
    ], AccordionComponent.prototype, "accordionHeaderComponent", void 0);
    __decorate([
        ContentChild(AccordionContentComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", AccordionContentComponent)
    ], AccordionComponent.prototype, "accordionContentComponent", void 0);
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], AccordionComponent.prototype, "templateRef", void 0);
    AccordionComponent = __decorate([
        Component({
            selector: 'mk-accordion',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], AccordionComponent);
    return AccordionComponent;
}());
/*
 *
 */
var AccordionGroupComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    function AccordionGroupComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.activeIndex = [0];
        // @TODO change types for listeners to all files
        this.listeners = [];
        // @TODO change types for subscriptions to all files
        this.subscriptions = [];
        this.styleClass = 'box-group';
        this.collapseStart = new EventEmitter();
        this.collapseDone = new EventEmitter();
    }
    AccordionGroupComponent_1 = AccordionGroupComponent;
    Object.defineProperty(AccordionGroupComponent.prototype, "_activeIndex", {
        set: function (value) {
            this.activeIndex = value instanceof Array ? value : [value];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [headerMouseLeave description]
     * @method headerMouseLeave
     * @param accordion [description]
     */
    AccordionGroupComponent.headerMouseLeave = function (accordion) {
        accordion.headerStyleColor = accordion.headerColor;
    };
    /**
     * [headerMouseEnter description]
     * @method headerMouseEnter
     * @param accordion [description]
     */
    AccordionGroupComponent.headerMouseEnter = function (accordion) {
        if (accordion.headerColorHover) {
            accordion.headerStyleColor = accordion.headerColorHover;
        }
    };
    /**
     * @method ngAfterViewInit
     */
    AccordionGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setAccordionsIndex();
        this.updateAccordionIsCollapsed();
        this.subscriptions.push(this.accordionComponents.changes.subscribe(function () {
            _this.setAccordionsIndex();
        }));
    };
    /**
     * @method ngAfterViewInit
     */
    AccordionGroupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.setAccordionsToggle();
        this.subscriptions.push(this.accordionToggleDirectives.changes.subscribe(function () {
            _this.setAccordionsToggle();
        }));
    };
    /**
     * [ngOnChanges description]
     * @method ngOnChanges
     * @param changes [description]
     * @return [description]
     */
    AccordionGroupComponent.prototype.ngOnChanges = function (changes) {
        if (changes._activeIndex.firstChange === false) {
            this.updateAccordionIsCollapsed();
        }
    };
    /**
     * @method ngOnDestroy
     */
    AccordionGroupComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    };
    /**
     * [toggleAccordion description]
     * @method toggleAccordion
     * @param event       [description]
     * @param toggleIndex [description]
     */
    AccordionGroupComponent.prototype.toggleAccordion = function (event, toggleIndex) {
        event.preventDefault();
        var indexOf = this.activeIndex.indexOf(toggleIndex);
        if (indexOf === -1) {
            if (this.isMultiple) {
                this.activeIndex.push(toggleIndex);
            }
            else {
                this.activeIndex = [toggleIndex];
            }
        }
        else {
            if (this.isMultiple) {
                this.activeIndex.splice(indexOf, 1);
            }
            else {
                this.activeIndex = [];
            }
        }
        this.updateAccordionIsCollapsed();
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     * @param accordion [description]
     */
    AccordionGroupComponent.prototype.onCollapseStart = function (event, accordion) {
        accordion.isCollapsing = true;
        this.collapseStart.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     * @param accordion [description]
     */
    AccordionGroupComponent.prototype.onCollapseDone = function (event, accordion) {
        accordion.isCollapsing = false;
        this.collapseDone.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [setAccordionsIndex description]
     * @method setAccordionsIndex
     */
    AccordionGroupComponent.prototype.setAccordionsIndex = function () {
        this.accordionComponents.forEach(function (accordion, index) {
            accordion.index = index;
        });
    };
    /**
     * [setAccordionsToggle description]
     * @method setAccordionsToggle
     */
    AccordionGroupComponent.prototype.setAccordionsToggle = function () {
        var _this = this;
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular(function () {
            _this.accordionToggleDirectives.forEach(function (accordionToggle) {
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'click', function (event) {
                    _this.toggleAccordion(event, accordionToggle.accordionComponent.index);
                    _this.changeDetectorRef.detectChanges();
                }));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseenter', function () {
                    AccordionGroupComponent_1.headerMouseEnter(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                }));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseleave', function () {
                    AccordionGroupComponent_1.headerMouseLeave(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        });
    };
    /**
     * [updateAccordionIsCollapsed description]
     * @method updateAccordionIsCollapsed
     */
    AccordionGroupComponent.prototype.updateAccordionIsCollapsed = function () {
        var _this = this;
        this.accordionComponents.forEach(function (accordion, index) {
            accordion.isCollapsed = _this.activeIndex.indexOf(index) === -1;
        });
    };
    var AccordionGroupComponent_1;
    AccordionGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input('activeIndex'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], AccordionGroupComponent.prototype, "_activeIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], AccordionGroupComponent.prototype, "isMultiple", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionGroupComponent.prototype, "styleClass", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AccordionGroupComponent.prototype, "collapseStart", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AccordionGroupComponent.prototype, "collapseDone", void 0);
    __decorate([
        ContentChildren(AccordionComponent),
        __metadata("design:type", QueryList)
    ], AccordionGroupComponent.prototype, "accordionComponents", void 0);
    __decorate([
        ViewChildren(AccordionToggleDirective),
        __metadata("design:type", QueryList)
    ], AccordionGroupComponent.prototype, "accordionToggleDirectives", void 0);
    AccordionGroupComponent = AccordionGroupComponent_1 = __decorate([
        Component({
            selector: 'mk-accordion-group',
            template: "<div [ngClass]=\"styleClass\">\n  <div *ngFor=\"let accordion of accordionComponents\" class=\"panel box\" [mkColor]=\"accordion.borderColor\" mkColorProperty=\"border-top-color\" mkColorPrefix=\"box\">\n    <div [ngClass]=\"accordion.headerStyleClass\" [class.no-border]=\"accordion.isCollapsed && !accordion.isCollapsing\">\n      <h4 class=\"box-title\">\n        <a [mkAccordionToggle]=\"accordion\" href=\"#\" [mkFontColor]=\"accordion.headerStyleColor\" [class.collapsed]=\"accordion.isCollapsed\">\n          {{accordion.header}}\n          <ng-template *ngIf=\"!accordion.header\" [ngTemplateOutlet]=\"accordion.accordionHeaderComponent?.templateRef\"></ng-template>\n        </a>\n      </h4>\n    </div>\n    <div class=\"panel-collapse\" [mkCollapseAnimation]=\"accordion.isCollapsed\" (mkCollapseAnimation.start)=\"onCollapseStart($event, accordion)\" (mkCollapseAnimation.done)=\"onCollapseDone($event, accordion)\">\n      <div [ngClass]=\"accordion.contentStyleClass\" [mkFontColor]=\"accordion.contentColor\">\n        <ng-template [ngTemplateOutlet]=\"accordion.contentTemplateRef\"></ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n"
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            NgZone,
            Renderer2])
    ], AccordionGroupComponent);
    return AccordionGroupComponent;
}());

var AccordionModule = /** @class */ (function () {
    function AccordionModule() {
    }
    AccordionModule = __decorate([
        NgModule({
            imports: [CommonModule, AnimationsModule, ColorModule],
            exports: [AccordionHeaderComponent, AccordionContentComponent, AccordionComponent, AccordionGroupComponent],
            declarations: [AccordionToggleDirective, AccordionHeaderComponent,
                AccordionContentComponent, AccordionComponent, AccordionGroupComponent]
        })
    ], AccordionModule);
    return AccordionModule;
}());

/*
 *
 */
var AlertComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param  changeDetectorRef [description]
     * @param  ngZone            [description]
     * @param  renderer2         [description]
     * @param  viewContainerRef  [description]
     */
    function AlertComponent(changeDetectorRef, ngZone, renderer2, viewContainerRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.viewContainerRef = viewContainerRef;
        this.dismissibleClass = 'alert-dismissible';
        this.isDismissible = true;
        this.remove = false;
        this.type = 'alert';
        this.listeners = [];
        this.backgroundColor = 'danger';
        this.styleClass = '';
        this.collapseStart = new EventEmitter();
        this.collapseDone = new EventEmitter();
    }
    Object.defineProperty(AlertComponent.prototype, "callout", {
        set: function (value) {
            this.type = value ? 'callout' : 'alert';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertComponent.prototype, "_isDismissible", {
        set: function (value) {
            this.isDismissible = value;
            if (value) {
                this.dismissibleClass = this.type + "-dismissible";
            }
            else {
                this.dismissibleClass = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    AlertComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            if (_this.dismissOnTimeout) {
                setTimeout(function () {
                    if (!_this.changeDetectorRef.destroyed) {
                        _this.remove = true;
                        _this.changeDetectorRef.detectChanges();
                    }
                }, _this.dismissOnTimeout);
            }
            if (_this.removeButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.removeButtonElement.nativeElement, 'click', function () {
                    _this.remove = true;
                    _this.changeDetectorRef.detectChanges();
                }));
            }
        });
    };
    /**
     * @method ngOnDesroy
     */
    AlertComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     */
    AlertComponent.prototype.onCollapseStart = function (event) {
        this.collapseStart.emit(event);
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     */
    AlertComponent.prototype.onCollapseDone = function (event) {
        if (event.toState === '1') {
            this.listeners = removeListeners(this.listeners);
            this.removed = true;
            this.viewContainerRef.clear();
            this.changeDetectorRef.detectChanges();
        }
        this.collapseDone.emit(event);
    };
    AlertComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 },
        { type: ViewContainerRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AlertComponent.prototype, "backgroundColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], AlertComponent.prototype, "callout", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AlertComponent.prototype, "color", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], AlertComponent.prototype, "dismissOnTimeout", void 0);
    __decorate([
        Input('isDismissible'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], AlertComponent.prototype, "_isDismissible", null);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AlertComponent.prototype, "styleClass", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AlertComponent.prototype, "collapseStart", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AlertComponent.prototype, "collapseDone", void 0);
    __decorate([
        ViewChild('removeButtonElement'),
        __metadata("design:type", ElementRef)
    ], AlertComponent.prototype, "removeButtonElement", void 0);
    __decorate([
        ViewChild('containerElementRef', { read: ViewContainerRef }),
        __metadata("design:type", ViewContainerRef)
    ], AlertComponent.prototype, "containerElementRef", void 0);
    AlertComponent = __decorate([
        Component({
            selector: 'mk-alert',
            template: "<div *ngIf=\"!removed\" [mkCollapseAnimation]=\"remove\" (mkCollapseAnimation.start)=\"onCollapseStart($event)\" (mkCollapseAnimation.done)=\"onCollapseDone($event)\">\n  <div [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\" [mkColorPrefix]=\"type\" [mkFontColor]=\"color\" [ngClass]=\"[styleClass, dismissibleClass, type]\">\n    <button *ngIf=\"isDismissible\" type=\"button\" class=\"close\" #removeButtonElement>&times;</button>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".callout-dismissable,.callout-dismissible{padding-right:35px}.callout-dismissable .close,.callout-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.callout .close{color:#000;opacity:.2}.callout .icon{margin-right:10px}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            NgZone,
            Renderer2,
            ViewContainerRef])
    ], AlertComponent);
    return AlertComponent;
}());

var AlertModule = /** @class */ (function () {
    function AlertModule() {
    }
    AlertModule = __decorate([
        NgModule({
            imports: [CommonModule, AnimationsModule, ColorModule],
            exports: [AlertComponent],
            declarations: [AlertComponent]
        })
    ], AlertModule);
    return AlertModule;
}());

/*
 *
 */
var BoxContentDirective = /** @class */ (function () {
    function BoxContentDirective() {
    }
    BoxContentDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-content'
        })
    ], BoxContentDirective);
    return BoxContentDirective;
}());
/*
 *
 */
var BoxFooterDirective = /** @class */ (function () {
    function BoxFooterDirective() {
    }
    BoxFooterDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-footer'
        })
    ], BoxFooterDirective);
    return BoxFooterDirective;
}());
/*
 *
 */
var BoxToolsDirective = /** @class */ (function () {
    function BoxToolsDirective() {
    }
    BoxToolsDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-tools'
        })
    ], BoxToolsDirective);
    return BoxToolsDirective;
}());
/*
 *
 */
var BoxHeaderDirective = /** @class */ (function () {
    function BoxHeaderDirective() {
    }
    BoxHeaderDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-header'
        })
    ], BoxHeaderDirective);
    return BoxHeaderDirective;
}());

/*
 *
 */
var BoxComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    function BoxComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.remove = false;
        this.listeners = [];
        this.boxColor = 'default';
        this.buttonsStyleClass = 'btn btn-box-tool';
        this.contentStyleClass = 'box-content-wrapper';
        this.footerStyleClass = 'box-footer';
        this.headerBorder = true;
        this.headerStyleClass = 'box-header';
        this.isCollapsable = true;
        this.isCollapsed = false;
        this.isRemovable = true;
        this.isSolid = false;
        this.loadingStyleClass = 'fa fa-refresh fa-spin';
        this.styleClass = 'box';
        this.collapseDone = new EventEmitter();
        this.collapseStart = new EventEmitter();
    }
    /**
     * @method ngAfterViewInit
     */
    BoxComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            if (_this.toggleButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.toggleButtonElement.nativeElement, 'click', function () {
                    _this.isCollapsed = !_this.isCollapsed;
                    _this.changeDetectorRef.detectChanges();
                }));
            }
            if (_this.removeButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.removeButtonElement.nativeElement, 'click', function () {
                    _this.remove = true;
                    _this.changeDetectorRef.detectChanges();
                }));
            }
        });
    };
    /**
     * @method ngOnDestroy
     */
    BoxComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
    };
    /**
     * [removedDone description]
     * @method removedDone
     * @param event [description]
     */
    BoxComponent.prototype.removedDone = function (event) {
        if (event.toState === '1') {
            this.removed = true;
        }
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     */
    BoxComponent.prototype.onCollapseStart = function (event) {
        if (event.fromState !== 'void') {
            this.isCollaping = true;
            this.collapseStart.emit(event);
        }
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     */
    BoxComponent.prototype.onCollapseDone = function (event) {
        if (event.fromState !== 'void') {
            this.isCollaping = false;
            this.collapseDone.emit(event);
        }
    };
    BoxComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "boxColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "buttonsStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "contentStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxComponent.prototype, "contentColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxComponent.prototype, "footer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxComponent.prototype, "footerColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "footerStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxComponent.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "headerBorder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxComponent.prototype, "headerColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "headerStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "isCollapsable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "isCollapsed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], BoxComponent.prototype, "isLoading", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "isRemovable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "isSolid", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxComponent.prototype, "loadingColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "loadingStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "styleClass", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "collapseDone", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "collapseStart", void 0);
    __decorate([
        ContentChild(BoxHeaderDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxHeaderDirective)
    ], BoxComponent.prototype, "boxHeaderDirective", void 0);
    __decorate([
        ContentChild(BoxFooterDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxFooterDirective)
    ], BoxComponent.prototype, "boxFooterDirective", void 0);
    __decorate([
        ContentChild(BoxContentDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxContentDirective)
    ], BoxComponent.prototype, "boxContentDirective", void 0);
    __decorate([
        ContentChild(BoxToolsDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxToolsDirective)
    ], BoxComponent.prototype, "boxToolsDirective", void 0);
    __decorate([
        ViewChild('toggleButtonElement'),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "toggleButtonElement", void 0);
    __decorate([
        ViewChild('removeButtonElement'),
        __metadata("design:type", Object)
    ], BoxComponent.prototype, "removeButtonElement", void 0);
    BoxComponent = __decorate([
        Component({
            selector: 'mk-box',
            template: "<div *ngIf=\"!removed\" [mkColor]=\"boxColor\" mkColorProperty=\"border-color\" mkColorPrefix=\"box\" [ngClass]=\"styleClass\" [class.collapsed-box]=\"isCollapsed && !isCollaping\" [class.box-solid]=\"isSolid\" [mkCollapseAnimation]=\"remove\" (mkCollapseAnimation.done)=\"removedDone($event)\">\n  <div *ngIf=\"header || boxHeaderDirective\" [ngClass]=\"headerStyleClass\" [mkColor]=\"boxColor\" [mkColorCondition]=\"isSolid\" mkColorProperty=\"background-color\" [class.with-border]=\"headerBorder\">\n    <h3 class=\"box-title\" [mkFontColor]=\"headerColor\">\n      {{header}}\n      <ng-content select=\"mk-box-header\"></ng-content>\n    </h3>\n    <div class=\"box-tools pull-right\">\n      <ng-content select=\"mk-box-tools\"></ng-content>\n      <button *ngIf=\"isCollapsable\" type=\"button\" [ngClass]=\"buttonsStyleClass\" #toggleButtonElement>\n        <i class=\"fa\" [ngClass]=\"{'fa-plus': isCollapsed, 'fa-minus': !isCollapsed}\"></i>\n      </button>\n      <button *ngIf=\"isRemovable\" type=\"button\" [ngClass]=\"buttonsStyleClass\" #removeButtonElement>\n        <i class=\"fa fa-times\"></i>\n      </button>\n    </div>\n  </div>\n  <div [ngClass]=\"contentStyleClass\" [mkFontColor]=\"contentColor\" [mkCollapseAnimation]=\"isCollapsed\" (mkCollapseAnimation.start)=\"onCollapseStart($event)\" (mkCollapseAnimation.done)=\"onCollapseDone($event)\">\n    <div class=\"box-body\">\n      <ng-container *ngIf=\"boxHeaderDirective || boxContentDirective || boxFooterDirective || boxToolsDirective; else noDirective\">\n        <ng-content select=\"mk-box-content\"></ng-content>\n      </ng-container>\n      <ng-template #noDirective>\n        <ng-content></ng-content>\n      </ng-template>\n    </div>\n    <div *ngIf=\"footer || boxFooterDirective\" [ngClass]=\"footerStyleClass\" [mkFontColor]=\"footerColor\">\n      {{footer}}\n      <ng-content select=\"mk-box-footer\"></ng-content>\n    </div>\n  </div>\n  <div *ngIf=\"isLoading\" class=\"overlay\">\n    <i [ngClass]=\"loadingStyleClass\" [mkFontColor]=\"loadingColor\"></i>\n  </div>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".box.collapsed-box .box-body,.box.collapsed-box .box-footer{display:inherit}.box-solid{border:1px solid}.box-body{background-color:#fff}.box.box-solid.bg-color>.box-header{color:#fff}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            NgZone,
            Renderer2])
    ], BoxComponent);
    return BoxComponent;
}());

var BoxModule = /** @class */ (function () {
    function BoxModule() {
    }
    BoxModule = __decorate([
        NgModule({
            imports: [CommonModule, AnimationsModule, ColorModule],
            exports: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective],
            declarations: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective]
        })
    ], BoxModule);
    return BoxModule;
}());

/*
 *
 */
var BoxInfoContentDirective = /** @class */ (function () {
    function BoxInfoContentDirective() {
    }
    BoxInfoContentDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-info-content'
        })
    ], BoxInfoContentDirective);
    return BoxInfoContentDirective;
}());
/*
 *
 */
var BoxInfoFooterDirective = /** @class */ (function () {
    function BoxInfoFooterDirective() {
    }
    BoxInfoFooterDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-info-footer'
        })
    ], BoxInfoFooterDirective);
    return BoxInfoFooterDirective;
}());
/*
 *
 */
var BoxInfoHeaderDirective = /** @class */ (function () {
    function BoxInfoHeaderDirective() {
    }
    BoxInfoHeaderDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-info-header'
        })
    ], BoxInfoHeaderDirective);
    return BoxInfoHeaderDirective;
}());

/*
 *
 */
var BoxInfoComponent = /** @class */ (function () {
    function BoxInfoComponent() {
        this.contentStyleClass = 'info-box-number';
        this.footerStyleClass = 'progress-description';
        this.headerStyleClass = 'info-box-text';
        this.iconColor = '#fff';
        this.iconStyleClass = 'ion ion-bag';
        this.styleClass = 'info-box';
    }
    /**
     * @method ngOnInit
     */
    BoxInfoComponent.prototype.ngOnInit = function () {
        if (!this.backgroundColor) {
            this.progressBarBg = this.iconBackgroundColor;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxInfoComponent.prototype, "backgroundColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxInfoComponent.prototype, "contentStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxInfoComponent.prototype, "contentColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxInfoComponent.prototype, "footer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxInfoComponent.prototype, "footerColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxInfoComponent.prototype, "footerStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxInfoComponent.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxInfoComponent.prototype, "headerColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxInfoComponent.prototype, "headerStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxInfoComponent.prototype, "iconBackgroundColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxInfoComponent.prototype, "iconColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxInfoComponent.prototype, "iconStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], BoxInfoComponent.prototype, "progressWidth", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxInfoComponent.prototype, "styleClass", void 0);
    __decorate([
        ContentChild(BoxInfoHeaderDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxInfoHeaderDirective)
    ], BoxInfoComponent.prototype, "boxInfoHeaderDirective", void 0);
    __decorate([
        ContentChild(BoxInfoFooterDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxInfoFooterDirective)
    ], BoxInfoComponent.prototype, "boxInfoFooterDirective", void 0);
    __decorate([
        ContentChild(BoxInfoContentDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxInfoContentDirective)
    ], BoxInfoComponent.prototype, "boxInfoContentDirective", void 0);
    BoxInfoComponent = __decorate([
        Component({
            selector: 'mk-box-info',
            template: "<div [ngClass]=\"styleClass\" [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\">\n  <span class=\"info-box-icon\" [mkColor]=\"iconBackgroundColor\" mkColorProperty=\"background-color\">\n    <i [ngClass]=\"iconStyleClass\" [mkFontColor]=\"iconColor\"></i>\n  </span>\n  <div class=\"info-box-content\">\n    <span *ngIf=\"header || boxInfoHeaderDirective\" [ngClass]=\"headerStyleClass\" [mkFontColor]=\"headerColor\">\n      {{header}}\n      <ng-content select=\"mk-box-header\"></ng-content>\n    </span>\n    <span [ngClass]=\"contentStyleClass\" [mkFontColor]=\"contentColor\">\n      <ng-container *ngIf=\"boxInfoHeaderDirective || boxInfoContentDirective || boxInfoFooterDirective; else noDirective\">\n        <ng-content select=\"mk-box-content\"></ng-content>\n      </ng-container>\n      <ng-template #noDirective>\n        <ng-content></ng-content>\n      </ng-template>\n    </span>\n    <div *ngIf=\"progressWidth\" class=\"progress\">\n      <div class=\"progress-bar\" [mkColor]=\"progressBarBg\" mkColorProperty=\"background-color\" [style.width.%]=\"progressWidth\"></div>\n    </div>\n    <span *ngIf=\"footer || boxInfoFooterDirective\" [ngClass]=\"footerStyleClass\" [mkFontColor]=\"footerColor\">\n      {{footer}}\n      <ng-content select=\"mk-box-footer\"></ng-content>\n    </span>\n  </div>\n</div>\n",
            styles: [".info-box.bg-color>.info-box-content{color:#fff}"]
        })
    ], BoxInfoComponent);
    return BoxInfoComponent;
}());

var BoxInfoModule = /** @class */ (function () {
    function BoxInfoModule() {
    }
    BoxInfoModule = __decorate([
        NgModule({
            imports: [CommonModule, ColorModule],
            exports: [BoxInfoComponent, BoxInfoHeaderDirective, BoxInfoContentDirective, BoxInfoFooterDirective],
            declarations: [BoxInfoComponent, BoxInfoHeaderDirective, BoxInfoContentDirective, BoxInfoFooterDirective]
        })
    ], BoxInfoModule);
    return BoxInfoModule;
}());

/*
 *
 */
var BoxSmallFooterDirective = /** @class */ (function () {
    function BoxSmallFooterDirective() {
    }
    BoxSmallFooterDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-small-footer'
        })
    ], BoxSmallFooterDirective);
    return BoxSmallFooterDirective;
}());
/*
 *
 */
var BoxSmallHeaderDirective = /** @class */ (function () {
    function BoxSmallHeaderDirective() {
    }
    BoxSmallHeaderDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-small-header'
        })
    ], BoxSmallHeaderDirective);
    return BoxSmallHeaderDirective;
}());
/*
 *
 */
var BoxSmallContentDirective = /** @class */ (function () {
    function BoxSmallContentDirective() {
    }
    BoxSmallContentDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-box-small-content'
        })
    ], BoxSmallContentDirective);
    return BoxSmallContentDirective;
}());

/*
 *
 */
var BoxSmallComponent = /** @class */ (function () {
    function BoxSmallComponent() {
        this.contentStyleClass = 'small-box-content';
        this.footerStyleClass = 'small-box-footer';
        this.headerStyleClass = 'small-box-header';
        this.iconStyleClass = 'ion ion-bag';
        this.styleClass = 'small-box';
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxSmallComponent.prototype, "backgroundColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxSmallComponent.prototype, "contentColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxSmallComponent.prototype, "contentStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxSmallComponent.prototype, "footer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxSmallComponent.prototype, "footerColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxSmallComponent.prototype, "footerStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxSmallComponent.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxSmallComponent.prototype, "headerColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxSmallComponent.prototype, "headerStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], BoxSmallComponent.prototype, "iconColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxSmallComponent.prototype, "iconStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BoxSmallComponent.prototype, "styleClass", void 0);
    __decorate([
        ContentChild(BoxSmallHeaderDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxSmallHeaderDirective)
    ], BoxSmallComponent.prototype, "boxSmallHeaderDirective", void 0);
    __decorate([
        ContentChild(BoxSmallFooterDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxSmallFooterDirective)
    ], BoxSmallComponent.prototype, "boxSmallFooterDirective", void 0);
    __decorate([
        ContentChild(BoxSmallContentDirective, /* TODO: add static flag */ {}),
        __metadata("design:type", BoxSmallContentDirective)
    ], BoxSmallComponent.prototype, "boxSmallContentDirective", void 0);
    BoxSmallComponent = __decorate([
        Component({
            selector: 'mk-box-small',
            template: "<div [ngClass]=\"styleClass\" [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\">\n  <div class=\"inner\">\n    <h3 *ngIf=\"header || boxSmallHeaderDirective\" [ngClass]=\"headerStyleClass\" [mkFontColor]=\"headerColor\">\n      {{header}}\n      <ng-content select=\"mk-box-small-header\"></ng-content>\n    </h3>\n    <p [ngClass]=\"contentStyleClass\" [mkFontColor]=\"contentColor\">\n      <ng-container *ngIf=\"boxSmallHeaderDirective || boxSmallContentDirective || boxSmallFooterDirective; else noDirective\">\n        <ng-content select=\"mk-box-small-content\"></ng-content>\n      </ng-container>\n      <ng-template #noDirective>\n        <ng-content></ng-content>\n      </ng-template>\n    </p>\n  </div>\n  <div *ngIf=\"iconStyleClass\" class=\"icon\">\n    <i [ngClass]=\"iconStyleClass\" [mkFontColor]=\"iconColor\"></i>\n  </div>\n  <span *ngIf=\"footer || boxSmallFooterDirective\" [ngClass]=\"footerStyleClass\" [mkFontColor]=\"footerColor\">\n    {{footer}}\n    <ng-content select=\"mk-box-small-footer\"></ng-content>\n  </span>\n</div>\n",
            styles: [".small-box.bg-color{color:#fff}/deep/ .small-box-footer:hover{cursor:pointer}/deep/ .small-box-footer a{color:rgba(255,255,255,.8)}/deep/ .small-box-footer:hover a{color:#fff}"]
        })
    ], BoxSmallComponent);
    return BoxSmallComponent;
}());

var BoxSmallModule = /** @class */ (function () {
    function BoxSmallModule() {
    }
    BoxSmallModule = __decorate([
        NgModule({
            imports: [CommonModule, ColorModule],
            exports: [BoxSmallComponent, BoxSmallHeaderDirective, BoxSmallContentDirective, BoxSmallFooterDirective],
            declarations: [BoxSmallComponent, BoxSmallHeaderDirective, BoxSmallContentDirective, BoxSmallFooterDirective]
        })
    ], BoxSmallModule);
    return BoxSmallModule;
}());

/*
 *
 */
var DropdownToggleComponent = /** @class */ (function () {
    function DropdownToggleComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], DropdownToggleComponent.prototype, "templateRef", void 0);
    __decorate([
        ContentChild('toggleElement', /* TODO: add static flag */ {}),
        __metadata("design:type", ElementRef)
    ], DropdownToggleComponent.prototype, "toggleElement", void 0);
    DropdownToggleComponent = __decorate([
        Component({
            selector: 'mk-dropdown-toggle',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], DropdownToggleComponent);
    return DropdownToggleComponent;
}());
/*
 *
 */
var DropdownMenuComponent = /** @class */ (function () {
    function DropdownMenuComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], DropdownMenuComponent.prototype, "templateRef", void 0);
    DropdownMenuComponent = __decorate([
        Component({
            selector: 'mk-dropdown-menu',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], DropdownMenuComponent);
    return DropdownMenuComponent;
}());
/*
 *
 */
var DropdownComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param elementRef [description]
     * @param ngZone [description]
     * @param renderer2 [description]
     */
    function DropdownComponent(changeDetectorRef, elementRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.buttonStyleClass = 'btn dropdown-toggle';
        this.buttonBackgroudColor = 'default';
        this.contentStyleClass = 'dropdown-menu';
        this.isCollapsed = true;
        this.isWrapper = true;
        this.styleClass = 'dropdown';
        this.collapseStart = new EventEmitter();
        this.collapseDone = new EventEmitter();
    }
    /**
     * @method ngAfterViewInit
     */
    DropdownComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var toggleNativeElement = this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement ?
            this.dropdownToggleComponent.toggleElement.nativeElement : this.toggleElement ?
            this.toggleElement : this.defaultToggleElement ?
            this.defaultToggleElement.nativeElement : null;
        if (toggleNativeElement) {
            this.ngZone.runOutsideAngular(function () {
                _this.listeners.push(_this.renderer2.listen(toggleNativeElement, 'click', function (event) {
                    _this.toggleDropdown(event);
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        }
    };
    /**
     * @method ngOnDestroy
     */
    DropdownComponent.prototype.ngOnDestroy = function () {
        this.unBindDocumentClickListener();
        removeListeners(this.listeners);
    };
    /**
     * [toggle description]
     * @method toggle
     * @param event [description]
     */
    DropdownComponent.prototype.toggleDropdown = function (event) {
        var _this = this;
        event.preventDefault();
        this.isCollapsed = !this.isCollapsed;
        if (!this.isCollapsed) {
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.bindDocumentClickListener();
                });
            });
        }
        else {
            this.unBindDocumentClickListener();
        }
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     */
    DropdownComponent.prototype.onCollapseStart = function (event) {
        this.collapseStart.emit(event);
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     */
    DropdownComponent.prototype.onCollapseDone = function (event) {
        this.collapseStart.emit(event);
    };
    /**
     * [bindDocumentClickListener description]
     * @method bindDocumentClickListener
     */
    DropdownComponent.prototype.bindDocumentClickListener = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.documentClickListener = _this.renderer2.listen('document', 'click', function () {
                if (!_this.isCollapsed) {
                    _this.isCollapsed = true;
                    _this.unBindDocumentClickListener();
                    _this.changeDetectorRef.detectChanges();
                }
            });
        });
    };
    /**
     * [unBindDocumentClickListener description]
     * @method unBindDocumentClickListener
     */
    DropdownComponent.prototype.unBindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
    };
    DropdownComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "buttonStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "buttonBackgroudColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "contentStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "isCollapsed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "isWrapper", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "styleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Element)
    ], DropdownComponent.prototype, "toggleElement", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DropdownComponent.prototype, "toggleText", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "collapseStart", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "collapseDone", void 0);
    __decorate([
        ContentChild(DropdownToggleComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", DropdownToggleComponent)
    ], DropdownComponent.prototype, "dropdownToggleComponent", void 0);
    __decorate([
        ContentChild(DropdownMenuComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", DropdownMenuComponent)
    ], DropdownComponent.prototype, "dropdownMenuComponent", void 0);
    __decorate([
        ViewChild('toggleElement'),
        __metadata("design:type", ElementRef)
    ], DropdownComponent.prototype, "defaultToggleElement", void 0);
    DropdownComponent = __decorate([
        Component({
            selector: 'mk-dropdown, [mk-dropdown]',
            template: "<ng-template #innerTemplate>\n  <ng-container *ngIf=\"this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement; else noToggleElement\" [ngTemplateOutlet]=\"dropdownToggleComponent.templateRef\"></ng-container>\n  <ng-template #noToggleElement>\n    <button *ngIf=\"toggleText || dropdownToggleComponent\" [mkColor]=\"buttonBackgroudColor\" mkColorProperty=\"background-color\" mkColorPrefix=\"btn\" [ngClass]=\"buttonStyleClass\" #toggleElement>\n      {{toggleText}}\n      <ng-container [ngTemplateOutlet]=\"dropdownToggleComponent?.templateRef\"></ng-container>\n    </button>\n  </ng-template>\n  <ul [ngClass]=\"contentStyleClass\" [mkCollapseAnimation]=\"isCollapsed\" (mkCollapseAnimation.start)=\"onCollapseStart($event)\" (mkCollapseAnimation.done)=\"onCollapseDone($event)\">\n    <ng-container *ngIf=\"dropdownMenuComponent; else noDropdownMenuComponent\" [ngTemplateOutlet]=\"dropdownMenuComponent.templateRef\"></ng-container>\n    <ng-template #noDropdownMenuComponent>\n      <ng-content></ng-content>\n    </ng-template>\n  </ul>\n</ng-template>\n\n<div *ngIf=\"isWrapper; else noWrapper\" [ngClass]=\"styleClass\">\n  <ng-container *ngTemplateOutlet=\"innerTemplate\"></ng-container>\n</div>\n\n<ng-template #noWrapper>\n  <ng-container *ngTemplateOutlet=\"innerTemplate\"></ng-container>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".dropdown-menu{display:block}.dropdown-menu.collapsing:not(.un-collapse){transition-property:height,padding-top,padding-bottom;padding-top:0;padding-bottom:0}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            ElementRef,
            NgZone,
            Renderer2])
    ], DropdownComponent);
    return DropdownComponent;
}());

var DropdownModule = /** @class */ (function () {
    function DropdownModule() {
    }
    DropdownModule = __decorate([
        NgModule({
            imports: [CommonModule, AnimationsModule, ColorModule],
            exports: [DropdownComponent, DropdownToggleComponent, DropdownMenuComponent],
            declarations: [DropdownComponent, DropdownToggleComponent, DropdownMenuComponent]
        })
    ], DropdownModule);
    return DropdownModule;
}());

/*
 *
 */
var InputGroupLabelDirective = /** @class */ (function () {
    function InputGroupLabelDirective() {
    }
    InputGroupLabelDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-input-group-label'
        })
    ], InputGroupLabelDirective);
    return InputGroupLabelDirective;
}());
/*
 *
 */
var InputGroupAddonLeftDirective = /** @class */ (function () {
    function InputGroupAddonLeftDirective() {
    }
    InputGroupAddonLeftDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-input-group-addon-left'
        })
    ], InputGroupAddonLeftDirective);
    return InputGroupAddonLeftDirective;
}());
/*
 *
 */
var InputGroupAddonRightDirective = /** @class */ (function () {
    function InputGroupAddonRightDirective() {
    }
    InputGroupAddonRightDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-input-group-addon-right'
        })
    ], InputGroupAddonRightDirective);
    return InputGroupAddonRightDirective;
}());
/*
 *
 */
var InputGroupContentDirective = /** @class */ (function () {
    function InputGroupContentDirective() {
    }
    InputGroupContentDirective = __decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'mk-input-group-content'
        })
    ], InputGroupContentDirective);
    return InputGroupContentDirective;
}());

/*
 *
 */
var ClassService = /** @class */ (function () {
    function ClassService(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.currentClasses = [];
    }
    ClassService.prototype.applyClasses = function (cssClasses) {
        var _this = this;
        if (typeof cssClasses === 'string') {
            cssClasses = cssClasses.split(' ');
        }
        // Remove only classes that are not in cssClasses
        var classesToRemove = this.currentClasses.filter(function (x) { return cssClasses.indexOf(x) === -1; });
        classesToRemove.forEach(function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, cssClasse);
            }
        });
        // Add only classes that are not in currentClasses
        var classesToAdd = cssClasses.filter(function (x) { return _this.currentClasses.indexOf(x) === -1; });
        classesToAdd.forEach(function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.addClass(_this.elementRef.nativeElement, cssClasse);
            }
        });
        // Update current classes for futur updates
        this.currentClasses = __spread(cssClasses);
    };
    ClassService.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ClassService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2])
    ], ClassService);
    return ClassService;
}());

// @TODO onFocus Color
var InputTextDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param  elementRef   [description]
     * @param  renderer2    [description]
     * @param  ngControl    [description]
     * @param  colorService [description]
     * @param  classService [description]
     */
    function InputTextDirective(elementRef, renderer2, ngControl, colorService, classService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.ngControl = ngControl;
        this.colorService = colorService;
        this.classService = classService;
        this.defaultClass = 'form-control';
        this.onKeyUp = new Subject();
        this.onKeyup = this.onKeyUp.asObservable();
    }
    Object.defineProperty(InputTextDirective.prototype, "borderColor", {
        set: function (color) {
            this.colorService.setBackgroundColor(color, true, 'border-color', null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputTextDirective.prototype, "class", {
        set: function (className) {
            this.isSetClass = true;
            this.classService.applyClasses(className);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputTextDirective.prototype, "color", {
        set: function (color) {
            this.colorService.setFontColor(color);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    InputTextDirective.prototype.ngOnInit = function () {
        if (!this.isSetClass) {
            this.classService.applyClasses(this.defaultClass);
        }
    };
    InputTextDirective.prototype.keyUpListener = function () {
        this.onKeyUp.next(this.ngControl);
    };
    InputTextDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgControl },
        { type: ColorService },
        { type: ClassService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], InputTextDirective.prototype, "borderColor", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], InputTextDirective.prototype, "class", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], InputTextDirective.prototype, "color", null);
    __decorate([
        HostListener('keyup'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], InputTextDirective.prototype, "keyUpListener", null);
    InputTextDirective = __decorate([
        Directive({
            selector: '[mkInputText]',
            providers: [ColorService, ClassService]
        }),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            NgControl,
            ColorService,
            ClassService])
    ], InputTextDirective);
    return InputTextDirective;
}());

/*
 *
 */
var InputGroupComponent = /** @class */ (function () {
    function InputGroupComponent() {
        this.subscriptions = [];
        this.inputColor = 'default';
        this.inputErrorColor = 'danger';
        this.inputValidColor = 'success';
        this.wrapperClasses = 'form-group';
    }
    InputGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.subscriptions.push(this.inputTextDirective.onKeyup.subscribe(function (value) {
            if (value.invalid) {
                _this.currentColor = _this.inputErrorColor;
                _this.currentFontColor = _this.inputErrorFontColor;
            }
            else if (!value.invalid) {
                _this.currentColor = _this.inputValidColor;
                _this.currentFontColor = _this.inputValidFontColor;
            }
            else {
                _this.currentColor = _this.inputColor;
                _this.currentFontColor = _this.inputFontColor;
            }
        }));
    };
    InputGroupComponent.prototype.ngOnDestroy = function () {
        removeSubscriptions(this.subscriptions);
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], InputGroupComponent.prototype, "addonLeft", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], InputGroupComponent.prototype, "addonRight", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], InputGroupComponent.prototype, "inputColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], InputGroupComponent.prototype, "inputFontColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], InputGroupComponent.prototype, "inputErrorColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], InputGroupComponent.prototype, "inputErrorFontColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], InputGroupComponent.prototype, "inputValidColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], InputGroupComponent.prototype, "inputValidFontColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], InputGroupComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], InputGroupComponent.prototype, "wrapperClasses", void 0);
    __decorate([
        ContentChild(InputGroupLabelDirective),
        __metadata("design:type", InputGroupLabelDirective)
    ], InputGroupComponent.prototype, "inputGroupLabelDirective", void 0);
    __decorate([
        ContentChild(InputGroupAddonLeftDirective),
        __metadata("design:type", InputGroupAddonLeftDirective)
    ], InputGroupComponent.prototype, "inputGroupAddonLeftDirective", void 0);
    __decorate([
        ContentChild(InputGroupAddonRightDirective),
        __metadata("design:type", InputGroupAddonRightDirective)
    ], InputGroupComponent.prototype, "inputGroupAddonRightDirective", void 0);
    __decorate([
        ContentChild(InputGroupContentDirective),
        __metadata("design:type", InputGroupContentDirective)
    ], InputGroupComponent.prototype, "inputGroupContentDirective", void 0);
    __decorate([
        ContentChild(InputTextDirective),
        __metadata("design:type", InputTextDirective)
    ], InputGroupComponent.prototype, "inputTextDirective", void 0);
    InputGroupComponent = __decorate([
        Component({
            selector: 'mk-input-group',
            template: "<div [ngClass]=\"wrapperClasses\" [mkColor]=\"currentColor || inputColor\" mkColorPrefix=\"has\">\n  <label *ngIf=\"label || inputGroupLabelDirective\">\n    {{label}}\n    <ng-content select=\"mk-input-group-label\"></ng-content>\n  </label>\n  <div *ngIf=\"addonLeft || inputGroupAddonLeftDirective || addonRight || inputGroupAddonRightDirective; else noAddon\" class=\"input-group\">\n    <span *ngIf=\"addonLeft || inputGroupAddonLeftDirective\" class=\"input-group-addon\">\n      {{addonLeft}}\n      <ng-content select=\"mk-input-group-addon-left\"></ng-content>\n    </span>\n    <ng-content select=\"mk-input-group-content\"></ng-content>\n    <span *ngIf=\"addonRight || inputGroupAddonRightDirective\" class=\"input-group-addon\">\n      {{addonRight}}\n      <ng-content select=\"mk-input-group-addon-right\"></ng-content>\n    </span>\n  </div>\n  <ng-template #noAddon><ng-content select=\"mk-input-group-content\"></ng-content></ng-template>\n</div>\n"
        })
    ], InputGroupComponent);
    return InputGroupComponent;
}());

var InputGroupModule = /** @class */ (function () {
    function InputGroupModule() {
    }
    InputGroupModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                ColorModule,
                FormsModule
            ],
            exports: [InputGroupComponent, InputGroupLabelDirective, InputGroupAddonLeftDirective,
                InputGroupAddonRightDirective, InputGroupContentDirective],
            declarations: [InputGroupComponent, InputGroupLabelDirective, InputGroupAddonLeftDirective,
                InputGroupAddonRightDirective, InputGroupContentDirective]
        })
    ], InputGroupModule);
    return InputGroupModule;
}());

var InputTextModule = /** @class */ (function () {
    function InputTextModule() {
    }
    InputTextModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                ColorModule,
                FormsModule
            ],
            exports: [InputTextDirective],
            declarations: [InputTextDirective]
        })
    ], InputTextModule);
    return InputTextModule;
}());

/*
 *
 */
var TabToggleDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     */
    function TabToggleDirective(elementRef) {
        this.elementRef = elementRef;
    }
    TabToggleDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input('mkTabToggle'),
        __metadata("design:type", Object)
    ], TabToggleDirective.prototype, "tabComponent", void 0);
    TabToggleDirective = __decorate([
        Directive({
            selector: '[mkTabToggle]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], TabToggleDirective);
    return TabToggleDirective;
}());

// @TODO Vertical tabs
/*
 *
 */
var TabHeaderComponent = /** @class */ (function () {
    function TabHeaderComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], TabHeaderComponent.prototype, "templateRef", void 0);
    TabHeaderComponent = __decorate([
        Component({
            selector: 'mk-tab-header',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], TabHeaderComponent);
    return TabHeaderComponent;
}());
/*
 *
 */
var TabContentComponent = /** @class */ (function () {
    function TabContentComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], TabContentComponent.prototype, "templateRef", void 0);
    TabContentComponent = __decorate([
        Component({
            selector: 'mk-tab-content',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], TabContentComponent);
    return TabContentComponent;
}());
/*
 *
 */
var TabComponent = /** @class */ (function () {
    function TabComponent() {
        this.isActive = false;
    }
    /**
     * @method ngOnInit
     */
    TabComponent.prototype.ngAfterContentInit = function () {
        if (this.tabContentComponent) {
            this.contentTemplateRef = this.tabContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TabComponent.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TabComponent.prototype, "isDisabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TabComponent.prototype, "tabColor", void 0);
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], TabComponent.prototype, "templateRef", void 0);
    __decorate([
        ContentChild(TabHeaderComponent),
        __metadata("design:type", TabHeaderComponent)
    ], TabComponent.prototype, "tabHeaderComponent", void 0);
    __decorate([
        ContentChild(TabContentComponent),
        __metadata("design:type", TabContentComponent)
    ], TabComponent.prototype, "tabContentComponent", void 0);
    TabComponent = __decorate([
        Component({
            selector: 'mk-tab',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], TabComponent);
    return TabComponent;
}());
/*
 *
 */
var TabsHeaderComponent = /** @class */ (function () {
    function TabsHeaderComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], TabsHeaderComponent.prototype, "templateRef", void 0);
    TabsHeaderComponent = __decorate([
        Component({
            selector: 'mk-tabs-header',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], TabsHeaderComponent);
    return TabsHeaderComponent;
}());
/*
 *
 */
var TabsComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    function TabsComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.subscriptions = [];
        this.headerStyleClass = 'header pull-left';
        this.navStyleClass = 'nav nav-tabs';
        this.contentStyleClass = 'tab-content';
        this.styleClass = 'nav-tabs-custom';
        this.closeTab = new EventEmitter();
        this.openTab = new EventEmitter();
    }
    Object.defineProperty(TabsComponent.prototype, "activeTabIndex", {
        set: function (index) {
            this.activatedTabIndex = index;
            this.changeDetectorRef.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngAfterViewInit
     */
    TabsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Set tab index on load.
        this.setTabIndex();
        // Update tab index if tabs is updated.
        this.subscriptions.push(this.tabs.changes.subscribe(function () {
            _this.setTabIndex();
        }));
        // Open tab on load.
        this.openTabIndex();
    };
    /**
     * @method ngAfterViewInit
     */
    TabsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // Set tab toggles on load.
        this.setTabsToggle();
        // Update tab toggles if tabs is updated.
        this.subscriptions.push(this.tabToggleDirectives.changes.subscribe(function () {
            _this.setTabsToggle();
        }));
    };
    /**
     * @method ngOnChanges
     * @param changes [description]
     */
    TabsComponent.prototype.ngOnChanges = function (changes) {
        if (changes.activeTabIndex) {
            this.openTabIndex();
        }
    };
    /**
     * @method ngOnDestroy
     */
    TabsComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    };
    /**
     * [toggleTab description]
     * @method toggleTab
     */
    TabsComponent.prototype.openTabIndex = function () {
        var _this = this;
        if (this.tabs) {
            this.tabs.forEach(function (tab) {
                if (_this.activatedTabIndex === tab.index || (_this.activatedTabIndex === undefined && tab.index === 0)) {
                    tab.isActive = true;
                    _this.openTab.emit({ index: tab.index });
                    _this.changeDetectorRef.detectChanges();
                }
                else if (tab.isActive) {
                    tab.isActive = false;
                    _this.closeTab.emit({ index: tab.index });
                    _this.changeDetectorRef.detectChanges();
                }
            });
        }
    };
    /**
     * [openTab description]
     * @method openTab
     * @param event     [description]
     * @param tabToOpen [description]
     */
    TabsComponent.prototype.onOpenTab = function (event, tabToOpen) {
        var _this = this;
        event.preventDefault();
        tabToOpen.isActive = true;
        this.openTab.emit({ event: event, index: tabToOpen.index });
        this.tabs.forEach(function (tab) {
            if (tab.isActive && tabToOpen !== tab) {
                tab.isActive = false;
                _this.closeTab.emit({ event: event, index: tab.index });
            }
        });
    };
    /**
     * [setTabIndex description]
     * @method setTabIndex
     */
    TabsComponent.prototype.setTabIndex = function () {
        this.tabs.forEach(function (tab, index) {
            tab.index = index;
        });
        this.changeDetectorRef.detectChanges();
    };
    /**
     * [setTabsToggle description]
     * @method setTabsToggle
     */
    TabsComponent.prototype.setTabsToggle = function () {
        var _this = this;
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular(function () {
            _this.tabToggleDirectives.forEach(function (tabToggle) {
                _this.listeners.push(_this.renderer2.listen(tabToggle.elementRef.nativeElement, 'click', function (event) {
                    _this.onOpenTab(event, tabToggle.tabComponent);
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        });
    };
    TabsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], TabsComponent.prototype, "activeTabIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TabsComponent.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TabsComponent.prototype, "headerStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TabsComponent.prototype, "navStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TabsComponent.prototype, "contentStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TabsComponent.prototype, "styleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TabsComponent.prototype, "tabsColor", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TabsComponent.prototype, "closeTab", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TabsComponent.prototype, "openTab", void 0);
    __decorate([
        ContentChild(TabsHeaderComponent, { static: true }),
        __metadata("design:type", TabsHeaderComponent)
    ], TabsComponent.prototype, "tabsHeaderComponent", void 0);
    __decorate([
        ContentChildren(TabComponent),
        __metadata("design:type", QueryList)
    ], TabsComponent.prototype, "tabs", void 0);
    __decorate([
        ViewChildren(TabToggleDirective),
        __metadata("design:type", QueryList)
    ], TabsComponent.prototype, "tabToggleDirectives", void 0);
    TabsComponent = __decorate([
        Component({
            selector: 'mk-tabs',
            template: "<div [ngClass]=\"styleClass\">\n  <ul [ngClass]=\"navStyleClass\" [class.pull-right]=\"header || tabsHeaderComponent\">\n    <li *ngFor=\"let tab of tabs\" [class.active]=\"tab.isActive\" [mkColor]=\"tab.tabColor || tabsColor\" mkColorProperty=\"border-top-color\">\n      <a *ngIf=\"!tab.isDisabled\" [mkTabToggle]=\"tab\" href=\"#\">\n        {{tab.header}}\n        <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent?.templateRef\"></ng-template>\n      </a>\n      <ng-template [ngIf]=\"tab.isDisabled\">\n        {{tab.header}}\n        <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent.templateRef\"></ng-template>\n      </ng-template>\n    </li>\n    <li *ngIf=\"tabsHeaderComponent || header\" [ngClass]=\"headerStyleClass\">\n      {{header}}\n      <ng-template *ngIf=\"!header\" [ngTemplateOutlet]=\"tabsHeaderComponent.templateRef\"></ng-template>\n    </li>\n  </ul>\n  <div [ngClass]=\"contentStyleClass\">\n    <div *ngFor=\"let tab of tabs\" class=\"tab-pane\" [class.active]=\"tab.isActive\">\n      <ng-template [ngTemplateOutlet]=\"tab.contentTemplateRef\"></ng-template>\n    </div>\n  </div>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".nav-tabs-custom>.nav-tabs>li{border-top-width:0}.nav-tabs-custom>.nav-tabs>li.active{border-top-width:3px}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            NgZone,
            Renderer2])
    ], TabsComponent);
    return TabsComponent;
}());

var TabsModule = /** @class */ (function () {
    function TabsModule() {
    }
    TabsModule = __decorate([
        NgModule({
            imports: [CommonModule, ColorModule],
            exports: [TabsComponent, TabsHeaderComponent, TabComponent, TabHeaderComponent, TabContentComponent],
            declarations: [TabToggleDirective, TabsComponent, TabsHeaderComponent, TabComponent, TabHeaderComponent, TabContentComponent]
        })
    ], TabsModule);
    return TabsModule;
}());

/*
 * Public API Surface of angular-admin-lte
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AccordionModule, AlertModule, BoxInfoModule, BoxModule, BoxSmallModule, BreadcrumbsModule, DropdownModule, InputGroupModule, InputTextModule, LayoutModule, LayoutService, LayoutStore, TabsModule, ContentModule as ɵa, BreadcrumbsComponent as ɵb, layoutStoreFactory as ɵba, layoutProvider as ɵbb, ColorModule as ɵbc, BackgroundColorDirective as ɵbd, ColorDirective as ɵbe, ColorService as ɵbf, AccordionHeaderComponent as ɵbg, AccordionContentComponent as ɵbh, AccordionComponent as ɵbi, AccordionGroupComponent as ɵbj, AccordionToggleDirective as ɵbk, AlertComponent as ɵbl, BoxComponent as ɵbm, BoxContentDirective as ɵbn, BoxFooterDirective as ɵbo, BoxToolsDirective as ɵbp, BoxHeaderDirective as ɵbq, BoxInfoComponent as ɵbr, BoxInfoContentDirective as ɵbs, BoxInfoFooterDirective as ɵbt, BoxInfoHeaderDirective as ɵbu, BoxSmallComponent as ɵbv, BoxSmallFooterDirective as ɵbw, BoxSmallHeaderDirective as ɵbx, BoxSmallContentDirective as ɵby, DropdownToggleComponent as ɵbz, RoutingService as ɵc, DropdownMenuComponent as ɵca, DropdownComponent as ɵcb, InputGroupComponent as ɵcc, InputGroupLabelDirective as ɵcd, InputGroupAddonLeftDirective as ɵce, InputGroupAddonRightDirective as ɵcf, InputGroupContentDirective as ɵcg, InputTextDirective as ɵch, ClassService as ɵci, TabHeaderComponent as ɵcj, TabContentComponent as ɵck, TabComponent as ɵcl, TabsHeaderComponent as ɵcm, TabsComponent as ɵcn, TabToggleDirective as ɵco, ContentComponent as ɵd, SidebarRightService as ɵe, HeaderService as ɵf, FooterService as ɵg, FooterModule as ɵh, FooterLeftComponent as ɵi, FooterRightComponent as ɵj, FooterComponent as ɵk, HeaderModule as ɵl, HeaderLogoComponent as ɵm, HeaderLogoMiniComponent as ɵn, HeaderComponent as ɵo, SidebarLeftModule as ɵp, AnimationsModule as ɵq, CollapseAnimationDirective as ɵr, SidebarLeftComponent as ɵs, SidebarLeftToggleDirective as ɵt, WrapperService as ɵu, SidebarRightModule as ɵv, SidebarRightComponent as ɵw, WrapperModule as ɵx, WrapperComponent as ɵy, LayoutConfigToken as ɵz };
//# sourceMappingURL=angular-admin-lte.js.map
