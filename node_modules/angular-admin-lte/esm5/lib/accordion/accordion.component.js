import { __decorate, __metadata } from "tslib";
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, QueryList, Renderer2, SimpleChanges, TemplateRef, ViewChild, ViewChildren } from '@angular/core';
import { AccordionToggleDirective } from './accordion.directive';
import { removeListeners, removeSubscriptions } from '../helpers';
/*
 *
 */
var AccordionHeaderComponent = /** @class */ (function () {
    function AccordionHeaderComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], AccordionHeaderComponent.prototype, "templateRef", void 0);
    AccordionHeaderComponent = __decorate([
        Component({
            selector: 'mk-accordion-header',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], AccordionHeaderComponent);
    return AccordionHeaderComponent;
}());
export { AccordionHeaderComponent };
/*
 *
 */
var AccordionContentComponent = /** @class */ (function () {
    function AccordionContentComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], AccordionContentComponent.prototype, "templateRef", void 0);
    AccordionContentComponent = __decorate([
        Component({
            selector: 'mk-accordion-content',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], AccordionContentComponent);
    return AccordionContentComponent;
}());
export { AccordionContentComponent };
/*
 *
 */
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent() {
        this.contentStyleClass = 'box-body';
        this.headerStyleClass = 'box-header with-border';
    }
    /**
     * @method ngOnInit
     */
    AccordionComponent.prototype.ngOnInit = function () {
        this.headerStyleColor = this.headerColor;
        if (!this.header && !this.accordionHeaderComponent) {
            throw new Error('Attribute "header" OR Component "mk-+accordion-header" is required for component "mk-+accordion"');
        }
        if (this.accordionContentComponent) {
            this.contentTemplateRef = this.accordionContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "borderColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "contentColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionComponent.prototype, "contentStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "headerColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "headerColorHover", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionComponent.prototype, "headerStyleClass", void 0);
    __decorate([
        ContentChild(AccordionHeaderComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", AccordionHeaderComponent)
    ], AccordionComponent.prototype, "accordionHeaderComponent", void 0);
    __decorate([
        ContentChild(AccordionContentComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", AccordionContentComponent)
    ], AccordionComponent.prototype, "accordionContentComponent", void 0);
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], AccordionComponent.prototype, "templateRef", void 0);
    AccordionComponent = __decorate([
        Component({
            selector: 'mk-accordion',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
        })
    ], AccordionComponent);
    return AccordionComponent;
}());
export { AccordionComponent };
/*
 *
 */
var AccordionGroupComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    function AccordionGroupComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.activeIndex = [0];
        // @TODO change types for listeners to all files
        this.listeners = [];
        // @TODO change types for subscriptions to all files
        this.subscriptions = [];
        this.styleClass = 'box-group';
        this.collapseStart = new EventEmitter();
        this.collapseDone = new EventEmitter();
    }
    AccordionGroupComponent_1 = AccordionGroupComponent;
    Object.defineProperty(AccordionGroupComponent.prototype, "_activeIndex", {
        set: function (value) {
            this.activeIndex = value instanceof Array ? value : [value];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [headerMouseLeave description]
     * @method headerMouseLeave
     * @param accordion [description]
     */
    AccordionGroupComponent.headerMouseLeave = function (accordion) {
        accordion.headerStyleColor = accordion.headerColor;
    };
    /**
     * [headerMouseEnter description]
     * @method headerMouseEnter
     * @param accordion [description]
     */
    AccordionGroupComponent.headerMouseEnter = function (accordion) {
        if (accordion.headerColorHover) {
            accordion.headerStyleColor = accordion.headerColorHover;
        }
    };
    /**
     * @method ngAfterViewInit
     */
    AccordionGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setAccordionsIndex();
        this.updateAccordionIsCollapsed();
        this.subscriptions.push(this.accordionComponents.changes.subscribe(function () {
            _this.setAccordionsIndex();
        }));
    };
    /**
     * @method ngAfterViewInit
     */
    AccordionGroupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.setAccordionsToggle();
        this.subscriptions.push(this.accordionToggleDirectives.changes.subscribe(function () {
            _this.setAccordionsToggle();
        }));
    };
    /**
     * [ngOnChanges description]
     * @method ngOnChanges
     * @param changes [description]
     * @return [description]
     */
    AccordionGroupComponent.prototype.ngOnChanges = function (changes) {
        if (changes._activeIndex.firstChange === false) {
            this.updateAccordionIsCollapsed();
        }
    };
    /**
     * @method ngOnDestroy
     */
    AccordionGroupComponent.prototype.ngOnDestroy = function () {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    };
    /**
     * [toggleAccordion description]
     * @method toggleAccordion
     * @param event       [description]
     * @param toggleIndex [description]
     */
    AccordionGroupComponent.prototype.toggleAccordion = function (event, toggleIndex) {
        event.preventDefault();
        var indexOf = this.activeIndex.indexOf(toggleIndex);
        if (indexOf === -1) {
            if (this.isMultiple) {
                this.activeIndex.push(toggleIndex);
            }
            else {
                this.activeIndex = [toggleIndex];
            }
        }
        else {
            if (this.isMultiple) {
                this.activeIndex.splice(indexOf, 1);
            }
            else {
                this.activeIndex = [];
            }
        }
        this.updateAccordionIsCollapsed();
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     * @param accordion [description]
     */
    AccordionGroupComponent.prototype.onCollapseStart = function (event, accordion) {
        accordion.isCollapsing = true;
        this.collapseStart.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     * @param accordion [description]
     */
    AccordionGroupComponent.prototype.onCollapseDone = function (event, accordion) {
        accordion.isCollapsing = false;
        this.collapseDone.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [setAccordionsIndex description]
     * @method setAccordionsIndex
     */
    AccordionGroupComponent.prototype.setAccordionsIndex = function () {
        this.accordionComponents.forEach(function (accordion, index) {
            accordion.index = index;
        });
    };
    /**
     * [setAccordionsToggle description]
     * @method setAccordionsToggle
     */
    AccordionGroupComponent.prototype.setAccordionsToggle = function () {
        var _this = this;
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular(function () {
            _this.accordionToggleDirectives.forEach(function (accordionToggle) {
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'click', function (event) {
                    _this.toggleAccordion(event, accordionToggle.accordionComponent.index);
                    _this.changeDetectorRef.detectChanges();
                }));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseenter', function () {
                    AccordionGroupComponent_1.headerMouseEnter(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                }));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseleave', function () {
                    AccordionGroupComponent_1.headerMouseLeave(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        });
    };
    /**
     * [updateAccordionIsCollapsed description]
     * @method updateAccordionIsCollapsed
     */
    AccordionGroupComponent.prototype.updateAccordionIsCollapsed = function () {
        var _this = this;
        this.accordionComponents.forEach(function (accordion, index) {
            accordion.isCollapsed = _this.activeIndex.indexOf(index) === -1;
        });
    };
    var AccordionGroupComponent_1;
    AccordionGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input('activeIndex'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], AccordionGroupComponent.prototype, "_activeIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], AccordionGroupComponent.prototype, "isMultiple", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionGroupComponent.prototype, "styleClass", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AccordionGroupComponent.prototype, "collapseStart", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AccordionGroupComponent.prototype, "collapseDone", void 0);
    __decorate([
        ContentChildren(AccordionComponent),
        __metadata("design:type", QueryList)
    ], AccordionGroupComponent.prototype, "accordionComponents", void 0);
    __decorate([
        ViewChildren(AccordionToggleDirective),
        __metadata("design:type", QueryList)
    ], AccordionGroupComponent.prototype, "accordionToggleDirectives", void 0);
    AccordionGroupComponent = AccordionGroupComponent_1 = __decorate([
        Component({
            selector: 'mk-accordion-group',
            template: "<div [ngClass]=\"styleClass\">\n  <div *ngFor=\"let accordion of accordionComponents\" class=\"panel box\" [mkColor]=\"accordion.borderColor\" mkColorProperty=\"border-top-color\" mkColorPrefix=\"box\">\n    <div [ngClass]=\"accordion.headerStyleClass\" [class.no-border]=\"accordion.isCollapsed && !accordion.isCollapsing\">\n      <h4 class=\"box-title\">\n        <a [mkAccordionToggle]=\"accordion\" href=\"#\" [mkFontColor]=\"accordion.headerStyleColor\" [class.collapsed]=\"accordion.isCollapsed\">\n          {{accordion.header}}\n          <ng-template *ngIf=\"!accordion.header\" [ngTemplateOutlet]=\"accordion.accordionHeaderComponent?.templateRef\"></ng-template>\n        </a>\n      </h4>\n    </div>\n    <div class=\"panel-collapse\" [mkCollapseAnimation]=\"accordion.isCollapsed\" (mkCollapseAnimation.start)=\"onCollapseStart($event, accordion)\" (mkCollapseAnimation.done)=\"onCollapseDone($event, accordion)\">\n      <div [ngClass]=\"accordion.contentStyleClass\" [mkFontColor]=\"accordion.contentColor\">\n        <ng-template [ngTemplateOutlet]=\"accordion.contentTemplateRef\"></ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n"
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            NgZone,
            Renderer2])
    ], AccordionGroupComponent);
    return AccordionGroupComponent;
}());
export { AccordionGroupComponent };
//# sourceMappingURL=data:application/json;base64,