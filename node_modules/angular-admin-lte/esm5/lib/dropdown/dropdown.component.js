import { __decorate, __metadata } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { removeListeners } from '../helpers';
/*
 *
 */
var DropdownToggleComponent = /** @class */ (function () {
    function DropdownToggleComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], DropdownToggleComponent.prototype, "templateRef", void 0);
    __decorate([
        ContentChild('toggleElement', /* TODO: add static flag */ {}),
        __metadata("design:type", ElementRef)
    ], DropdownToggleComponent.prototype, "toggleElement", void 0);
    DropdownToggleComponent = __decorate([
        Component({
            selector: 'mk-dropdown-toggle',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], DropdownToggleComponent);
    return DropdownToggleComponent;
}());
export { DropdownToggleComponent };
/*
 *
 */
var DropdownMenuComponent = /** @class */ (function () {
    function DropdownMenuComponent() {
    }
    __decorate([
        ViewChild('templateRef', { static: true }),
        __metadata("design:type", TemplateRef)
    ], DropdownMenuComponent.prototype, "templateRef", void 0);
    DropdownMenuComponent = __decorate([
        Component({
            selector: 'mk-dropdown-menu',
            template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], DropdownMenuComponent);
    return DropdownMenuComponent;
}());
export { DropdownMenuComponent };
/*
 *
 */
var DropdownComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param elementRef [description]
     * @param ngZone [description]
     * @param renderer2 [description]
     */
    function DropdownComponent(changeDetectorRef, elementRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.buttonStyleClass = 'btn dropdown-toggle';
        this.buttonBackgroudColor = 'default';
        this.contentStyleClass = 'dropdown-menu';
        this.isCollapsed = true;
        this.isWrapper = true;
        this.styleClass = 'dropdown';
        this.collapseStart = new EventEmitter();
        this.collapseDone = new EventEmitter();
    }
    /**
     * @method ngAfterViewInit
     */
    DropdownComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var toggleNativeElement = this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement ?
            this.dropdownToggleComponent.toggleElement.nativeElement : this.toggleElement ?
            this.toggleElement : this.defaultToggleElement ?
            this.defaultToggleElement.nativeElement : null;
        if (toggleNativeElement) {
            this.ngZone.runOutsideAngular(function () {
                _this.listeners.push(_this.renderer2.listen(toggleNativeElement, 'click', function (event) {
                    _this.toggleDropdown(event);
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        }
    };
    /**
     * @method ngOnDestroy
     */
    DropdownComponent.prototype.ngOnDestroy = function () {
        this.unBindDocumentClickListener();
        removeListeners(this.listeners);
    };
    /**
     * [toggle description]
     * @method toggle
     * @param event [description]
     */
    DropdownComponent.prototype.toggleDropdown = function (event) {
        var _this = this;
        event.preventDefault();
        this.isCollapsed = !this.isCollapsed;
        if (!this.isCollapsed) {
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.bindDocumentClickListener();
                });
            });
        }
        else {
            this.unBindDocumentClickListener();
        }
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     */
    DropdownComponent.prototype.onCollapseStart = function (event) {
        this.collapseStart.emit(event);
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     */
    DropdownComponent.prototype.onCollapseDone = function (event) {
        this.collapseStart.emit(event);
    };
    /**
     * [bindDocumentClickListener description]
     * @method bindDocumentClickListener
     */
    DropdownComponent.prototype.bindDocumentClickListener = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.documentClickListener = _this.renderer2.listen('document', 'click', function () {
                if (!_this.isCollapsed) {
                    _this.isCollapsed = true;
                    _this.unBindDocumentClickListener();
                    _this.changeDetectorRef.detectChanges();
                }
            });
        });
    };
    /**
     * [unBindDocumentClickListener description]
     * @method unBindDocumentClickListener
     */
    DropdownComponent.prototype.unBindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
    };
    DropdownComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "buttonStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "buttonBackgroudColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "contentStyleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "isCollapsed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "isWrapper", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "styleClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Element)
    ], DropdownComponent.prototype, "toggleElement", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DropdownComponent.prototype, "toggleText", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "collapseStart", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DropdownComponent.prototype, "collapseDone", void 0);
    __decorate([
        ContentChild(DropdownToggleComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", DropdownToggleComponent)
    ], DropdownComponent.prototype, "dropdownToggleComponent", void 0);
    __decorate([
        ContentChild(DropdownMenuComponent, /* TODO: add static flag */ {}),
        __metadata("design:type", DropdownMenuComponent)
    ], DropdownComponent.prototype, "dropdownMenuComponent", void 0);
    __decorate([
        ViewChild('toggleElement'),
        __metadata("design:type", ElementRef)
    ], DropdownComponent.prototype, "defaultToggleElement", void 0);
    DropdownComponent = __decorate([
        Component({
            selector: 'mk-dropdown, [mk-dropdown]',
            template: "<ng-template #innerTemplate>\n  <ng-container *ngIf=\"this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement; else noToggleElement\" [ngTemplateOutlet]=\"dropdownToggleComponent.templateRef\"></ng-container>\n  <ng-template #noToggleElement>\n    <button *ngIf=\"toggleText || dropdownToggleComponent\" [mkColor]=\"buttonBackgroudColor\" mkColorProperty=\"background-color\" mkColorPrefix=\"btn\" [ngClass]=\"buttonStyleClass\" #toggleElement>\n      {{toggleText}}\n      <ng-container [ngTemplateOutlet]=\"dropdownToggleComponent?.templateRef\"></ng-container>\n    </button>\n  </ng-template>\n  <ul [ngClass]=\"contentStyleClass\" [mkCollapseAnimation]=\"isCollapsed\" (mkCollapseAnimation.start)=\"onCollapseStart($event)\" (mkCollapseAnimation.done)=\"onCollapseDone($event)\">\n    <ng-container *ngIf=\"dropdownMenuComponent; else noDropdownMenuComponent\" [ngTemplateOutlet]=\"dropdownMenuComponent.templateRef\"></ng-container>\n    <ng-template #noDropdownMenuComponent>\n      <ng-content></ng-content>\n    </ng-template>\n  </ul>\n</ng-template>\n\n<div *ngIf=\"isWrapper; else noWrapper\" [ngClass]=\"styleClass\">\n  <ng-container *ngTemplateOutlet=\"innerTemplate\"></ng-container>\n</div>\n\n<ng-template #noWrapper>\n  <ng-container *ngTemplateOutlet=\"innerTemplate\"></ng-container>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".dropdown-menu{display:block}.dropdown-menu.collapsing:not(.un-collapse){transition-property:height,padding-top,padding-bottom;padding-top:0;padding-bottom:0}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            ElementRef,
            NgZone,
            Renderer2])
    ], DropdownComponent);
    return DropdownComponent;
}());
export { DropdownComponent };
//# sourceMappingURL=data:application/json;base64,