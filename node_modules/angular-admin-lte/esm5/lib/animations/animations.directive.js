import { __decorate, __metadata } from "tslib";
import { Directive, Input, Output, ElementRef, EventEmitter, Renderer2, NgZone, AfterContentInit, OnInit, OnDestroy } from '@angular/core';
/*
 *
 */
var CollapseAnimationDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     * @param ngZone     [description]
     * @param renderer2  [description]
     */
    function CollapseAnimationDirective(elementRef, ngZone, renderer2) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.firstStart = true;
        this.collapseAnimationDuration = 350;
        // tslint:disable-next-line:no-output-rename
        this.startEventEmitter = new EventEmitter();
        // tslint:disable-next-line:no-output-rename
        this.doneEventEmitter = new EventEmitter();
    }
    Object.defineProperty(CollapseAnimationDirective.prototype, "_isCollapsed", {
        set: function (value) {
            this.lastIsCollapsed = this.isCollapsed;
            this.isCollapsed = value;
            if (!this.firstStart) {
                this.emit('start');
                if (value) {
                    this.collapse();
                }
                else if (value === false) {
                    this.unCollapse();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    CollapseAnimationDirective.prototype.ngOnInit = function () {
        if (this.collapseAnimationDuration && this.collapseAnimationDuration !== 350) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-duration', this.collapseAnimationDuration + "ms");
        }
        if (this.collapseAnimationTiming) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-timing-function', this.collapseAnimationTiming);
        }
    };
    /**
     * @method ngAfterContentInit
     */
    CollapseAnimationDirective.prototype.ngAfterContentInit = function () {
        this.emit('start');
        if (this.isCollapsed) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'none');
            this.renderer2.addClass(this.elementRef.nativeElement, 'collapsing');
        }
        this.emit('done');
        this.firstStart = false;
        this.subscriptions();
    };
    /**
     * [ngOnDestroy description]
     * @method ngOnDestroy
     * @return [description]
     */
    CollapseAnimationDirective.prototype.ngOnDestroy = function () {
        if (this.listener) {
            this.listener();
        }
    };
    /**
     * [subscriptions description]
     * @method subscriptions
     */
    CollapseAnimationDirective.prototype.subscriptions = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.listener = _this.renderer2.listen(_this.elementRef.nativeElement, 'transitionend', function () {
                if (!_this.isCollapsed) {
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'un-collapse');
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'collapsing');
                }
                else {
                    _this.renderer2.setStyle(_this.elementRef.nativeElement, 'display', 'none');
                }
                requestAnimationFrame(function () {
                    _this.renderer2.removeStyle(_this.elementRef.nativeElement, 'height');
                    _this.emit('done');
                    _this.transitioning = false;
                });
            });
        });
    };
    /**
     * [unCollapse description]
     * @method unCollapse
     */
    CollapseAnimationDirective.prototype.unCollapse = function () {
        this.transitioning = true;
        this.renderer2.addClass(this.elementRef.nativeElement, 'un-collapse');
        this.renderer2.removeStyle(this.elementRef.nativeElement, 'display');
        this.renderer2.setStyle(this.elementRef.nativeElement, 'height', this.elementRef.nativeElement.scrollHeight + "px");
    };
    /**
     * [collapse description]
     * @method collapse
     */
    CollapseAnimationDirective.prototype.collapse = function () {
        var _this = this;
        requestAnimationFrame(function () {
            if (!_this.transitioning) {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', _this.elementRef.nativeElement.offsetHeight + "px");
                _this.renderer2.addClass(_this.elementRef.nativeElement, 'collapsing');
            }
            _this.transitioning = true;
            requestAnimationFrame(function () {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', "0px");
            });
        });
    };
    CollapseAnimationDirective.prototype.emit = function (phaseName) {
        var event = {
            element: this.elementRef.nativeElement,
            fromState: this.lastIsCollapsed === undefined ? 'void' : this.lastIsCollapsed ? '1' : '0',
            phaseName: phaseName,
            toState: this.isCollapsed === undefined ? 'void' : this.isCollapsed ? '1' : '0',
            totalTime: this.collapseAnimationDuration,
            triggerName: 'mkCollapseAnimation'
        };
        if (phaseName === 'done') {
            this.doneEventEmitter.emit(event);
        }
        else if (phaseName === 'start') {
            this.startEventEmitter.emit(event);
        }
    };
    CollapseAnimationDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CollapseAnimationDirective.prototype, "collapseAnimationDuration", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CollapseAnimationDirective.prototype, "collapseAnimationTiming", void 0);
    __decorate([
        Input('mkCollapseAnimation'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], CollapseAnimationDirective.prototype, "_isCollapsed", null);
    __decorate([
        Output('mkCollapseAnimation.start'),
        __metadata("design:type", Object)
    ], CollapseAnimationDirective.prototype, "startEventEmitter", void 0);
    __decorate([
        Output('mkCollapseAnimation.done'),
        __metadata("design:type", Object)
    ], CollapseAnimationDirective.prototype, "doneEventEmitter", void 0);
    CollapseAnimationDirective = __decorate([
        Directive({
            selector: '[mkCollapseAnimation]'
        }),
        __metadata("design:paramtypes", [ElementRef,
            NgZone,
            Renderer2])
    ], CollapseAnimationDirective);
    return CollapseAnimationDirective;
}());
export { CollapseAnimationDirective };
//# sourceMappingURL=data:application/json;base64,