import { __decorate, __metadata, __read, __spread } from "tslib";
import { Injectable, Renderer2, ElementRef } from '@angular/core';
/*
 *
 */
var ClassService = /** @class */ (function () {
    function ClassService(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.currentClasses = [];
    }
    ClassService.prototype.applyClasses = function (cssClasses) {
        var _this = this;
        if (typeof cssClasses === 'string') {
            cssClasses = cssClasses.split(' ');
        }
        // Remove only classes that are not in cssClasses
        var classesToRemove = this.currentClasses.filter(function (x) { return cssClasses.indexOf(x) === -1; });
        classesToRemove.forEach(function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, cssClasse);
            }
        });
        // Add only classes that are not in currentClasses
        var classesToAdd = cssClasses.filter(function (x) { return _this.currentClasses.indexOf(x) === -1; });
        classesToAdd.forEach(function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.addClass(_this.elementRef.nativeElement, cssClasse);
            }
        });
        // Update current classes for futur updates
        this.currentClasses = __spread(cssClasses);
    };
    ClassService.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ClassService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2])
    ], ClassService);
    return ClassService;
}());
export { ClassService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYWRtaW4tbHRlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2NsYXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRTs7R0FFRztBQUVIO0lBR0Usc0JBQ1UsVUFBc0IsRUFDdEIsU0FBb0I7UUFEcEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBSnRCLG1CQUFjLEdBQWtCLEVBQUUsQ0FBQztJQUt4QyxDQUFDO0lBR0csbUNBQVksR0FBbkIsVUFBb0IsVUFBa0M7UUFBdEQsaUJBdUJDO1FBdEJDLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUFFO1lBQ2xDLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BDO1FBRUQsaURBQWlEO1FBQ2pELElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQyxDQUFDO1FBQ3RGLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO1lBQy9CLElBQUksU0FBUyxFQUFFO2dCQUNiLEtBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ3RFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxrREFBa0Q7UUFDbEQsSUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFyQyxDQUFxQyxDQUFDLENBQUM7UUFDbkYsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7WUFDNUIsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsS0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDbkU7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILDJDQUEyQztRQUMzQyxJQUFJLENBQUMsY0FBYyxZQUFRLFVBQVUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7O2dCQTVCcUIsVUFBVTtnQkFDWCxTQUFTOztJQUxuQixZQUFZO1FBRHhCLFVBQVUsRUFBRTt5Q0FLVyxVQUFVO1lBQ1gsU0FBUztPQUxuQixZQUFZLENBaUN4QjtJQUFELG1CQUFDO0NBQUEsQUFqQ0QsSUFpQ0M7U0FqQ1ksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKlxuICpcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENsYXNzU2VydmljZSB7XG4gIHByaXZhdGUgY3VycmVudENsYXNzZXM6IEFycmF5PHN0cmluZz4gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMlxuICApIHt9XG5cblxuICBwdWJsaWMgYXBwbHlDbGFzc2VzKGNzc0NsYXNzZXM6IHN0cmluZyB8IEFycmF5PHN0cmluZz4pOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIGNzc0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjc3NDbGFzc2VzID0gY3NzQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBvbmx5IGNsYXNzZXMgdGhhdCBhcmUgbm90IGluIGNzc0NsYXNzZXNcbiAgICBjb25zdCBjbGFzc2VzVG9SZW1vdmUgPSB0aGlzLmN1cnJlbnRDbGFzc2VzLmZpbHRlcih4ID0+IGNzc0NsYXNzZXMuaW5kZXhPZih4KSA9PT0gLTEpO1xuICAgIGNsYXNzZXNUb1JlbW92ZS5mb3JFYWNoKGNzc0NsYXNzZSA9PiB7XG4gICAgICBpZiAoY3NzQ2xhc3NlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjc3NDbGFzc2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQWRkIG9ubHkgY2xhc3NlcyB0aGF0IGFyZSBub3QgaW4gY3VycmVudENsYXNzZXNcbiAgICBjb25zdCBjbGFzc2VzVG9BZGQgPSBjc3NDbGFzc2VzLmZpbHRlcih4ID0+IHRoaXMuY3VycmVudENsYXNzZXMuaW5kZXhPZih4KSA9PT0gLTEpO1xuICAgIGNsYXNzZXNUb0FkZC5mb3JFYWNoKGNzc0NsYXNzZSA9PiB7XG4gICAgICBpZiAoY3NzQ2xhc3NlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjc3NDbGFzc2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIGN1cnJlbnQgY2xhc3NlcyBmb3IgZnV0dXIgdXBkYXRlc1xuICAgIHRoaXMuY3VycmVudENsYXNzZXMgPSBbLi4uIGNzc0NsYXNzZXNdO1xuICB9XG59XG4iXX0=