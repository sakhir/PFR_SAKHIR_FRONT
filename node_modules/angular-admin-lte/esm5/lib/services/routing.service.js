import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, Event as RouterEvent, NavigationEnd, PRIMARY_OUTLET, Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
/*
 *
 */
var RoutingService = /** @class */ (function () {
    /**
     * @method constructor
     * @param router [description]
     */
    function RoutingService(router) {
        this.router = router;
        this.onChange = new BehaviorSubject(undefined);
        this.events = new BehaviorSubject(undefined);
        this.init();
    }
    RoutingService_1 = RoutingService;
    /**
     * [createUrl description]
     * @method createUrl
     * @param route [description]
     * @return [description]
     */
    RoutingService.createUrl = function (route) {
        var url = route.url.map(function (urlSegment) { return urlSegment.toString(); }).join('/');
        return url;
    };
    /**
     * [isChildrenSelfRoute description]
     * @method isChildrenSelfRoute
     * @param route [description]
     * @return [description]
     */
    RoutingService.isChildrenSelfRoute = function (route) {
        route.routeConfig.children.forEach(function (child) {
            if (child.path === '' && (child.component || child.loadChildren)) {
                return true;
            }
        });
        return false;
    };
    /**
     * [createBreadcrumb description]
     * @method createBreadcrumb
     * @param route [description]
     * @param url   [description]
     * @return [description]
     */
    RoutingService.createBreadcrumb = function (route, url) {
        var isUrl = true;
        if (route.children.length !== 0 && route.firstChild.routeConfig.path) {
            if (url !== '/' && !route.routeConfig.loadChildren && !route.routeConfig.component && !RoutingService_1.isChildrenSelfRoute(route)) {
                isUrl = false;
            }
        }
        return {
            data: route.data,
            params: route.params,
            url: isUrl ? url : null
        };
    };
    /**
     * [init description]
     * @method init
     */
    RoutingService.prototype.init = function () {
        var _this = this;
        this.router.events.subscribe(function (routeEvent) {
            // https://github.com/angular/angular/issues/17473: event not fired anymore on load for routed component.
            if (routeEvent instanceof NavigationEnd) {
                _this.events.next(routeEvent);
                var route = _this.router.routerState.root.snapshot;
                var tmpUrl = '';
                var url = '';
                var rootRoot = true;
                var paths = [];
                while (route.children.length) {
                    route = route.firstChild;
                    tmpUrl = "/" + RoutingService_1.createUrl(route);
                    if (route.outlet !== PRIMARY_OUTLET || (!route.routeConfig.path && !rootRoot)) {
                        continue;
                    }
                    rootRoot = false;
                    if (route.params && route.data) {
                        for (var key in route.params) {
                            if (!key) {
                                continue;
                            }
                            if (route.data.hasOwnProperty('title')) {
                                route.data.title = route.data.title.replace(":" + key, route.params[key]);
                                route.data.title = route.data.title.replace(":" + key, route.params[key]);
                            }
                            if (route.data.hasOwnProperty('breadcrumbs')) {
                                route.data.breadcrumbs = route.data.breadcrumbs.replace(":" + key, route.params[key]);
                            }
                            if (route.data.hasOwnProperty('description')) {
                                route.data.description = route.data.description.replace(":" + key, route.params[key]);
                            }
                        }
                    }
                    if (tmpUrl === '/') {
                        paths.push(RoutingService_1.createBreadcrumb(route, tmpUrl));
                    }
                    else {
                        url += tmpUrl;
                        paths.push(RoutingService_1.createBreadcrumb(route, url));
                    }
                }
                _this.onChange.next(paths);
            }
        });
    };
    var RoutingService_1;
    RoutingService.ctorParameters = function () { return [
        { type: Router }
    ]; };
    RoutingService = RoutingService_1 = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [Router])
    ], RoutingService);
    return RoutingService;
}());
export { RoutingService };
//# sourceMappingURL=data:application/json;base64,