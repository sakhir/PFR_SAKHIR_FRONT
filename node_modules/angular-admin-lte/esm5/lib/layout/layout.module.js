import { __decorate, __metadata, __param, __read, __spread } from "tslib";
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { ContentModule } from './content/content.module';
import { FooterModule } from './footer/footer.module';
import { HeaderModule } from './header/header.module';
import { SidebarLeftModule } from './sidebar-left/sidebar-left.module';
import { SidebarRightModule } from './sidebar-right/sidebar-right.module';
import { WrapperModule } from './wrapper/wrapper.module';
import { LayoutService } from './layout.service';
import { layoutProvider } from './layout.provider';
import { RoutingService } from '../services/routing.service';
import { WrapperService } from './wrapper/wrapper.service';
import { SidebarRightService } from './sidebar-right/sidebar-right.service';
import { HeaderService } from './header/header.service';
import { FooterService } from './footer/footer.service';
var LayoutModule = /** @class */ (function () {
    /**
     * @method constructor
     * @param parentModule [description]
     */
    function LayoutModule(parentModule) {
        if (parentModule) {
            throw new Error('LayoutModule is already loaded. Import it in the AppModule only!');
        }
    }
    LayoutModule_1 = LayoutModule;
    /**
     * [forRoot description]
     * @method forRoot
     * @param  layoutConfig [description]
     * @return [description]
     */
    LayoutModule.forRoot = function (layoutConfig) {
        return {
            ngModule: LayoutModule_1,
            providers: __spread(layoutProvider(layoutConfig), [LayoutService])
        };
    };
    var LayoutModule_1;
    LayoutModule.ctorParameters = function () { return [
        { type: LayoutModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    LayoutModule = LayoutModule_1 = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            exports: [ContentModule, FooterModule, HeaderModule, SidebarLeftModule, SidebarRightModule, WrapperModule],
            providers: [RoutingService, WrapperService, SidebarRightService, HeaderService, FooterService]
        }),
        __param(0, Optional()), __param(0, SkipSelf()),
        __metadata("design:paramtypes", [LayoutModule])
    ], LayoutModule);
    return LayoutModule;
}());
export { LayoutModule };
export * from './layout.service';
export * from './layout.store';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYWRtaW4tbHRlLyIsInNvdXJjZXMiOlsibGliL2xheW91dC9sYXlvdXQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDdkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDMUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXpELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBT3hEO0lBRUU7OztPQUdHO0lBQ0gsc0JBQW9DLFlBQTBCO1FBQzVELElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztTQUNyRjtJQUNILENBQUM7cUJBVlUsWUFBWTtJQVl2Qjs7Ozs7T0FLRztJQUNJLG9CQUFPLEdBQWQsVUFBZSxZQUF5QjtRQUN0QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGNBQVk7WUFDdEIsU0FBUyxXQUFNLGNBQWMsQ0FBQyxZQUFZLENBQUMsR0FBRSxhQUFhLEVBQUM7U0FDNUQsQ0FBQztJQUNKLENBQUM7OztnQkFqQmlELFlBQVksdUJBQWpELFFBQVEsWUFBSSxRQUFROztJQU50QixZQUFZO1FBTHhCLFFBQVEsQ0FBQztZQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUM7WUFDckMsT0FBTyxFQUFFLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsYUFBYSxDQUFDO1lBQzFHLFNBQVMsRUFBRSxDQUFDLGNBQWMsRUFBRSxjQUFjLEVBQUUsbUJBQW1CLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQztTQUMvRixDQUFDO1FBT2EsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsUUFBUSxFQUFFLENBQUE7eUNBQWUsWUFBWTtPQU5uRCxZQUFZLENBd0J4QjtJQUFELG1CQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0F4QlksWUFBWTtBQTBCekIsY0FBYyxrQkFBa0IsQ0FBQztBQUNqQyxjQUFjLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IENvbnRlbnRNb2R1bGUgfSBmcm9tICcuL2NvbnRlbnQvY29udGVudC5tb2R1bGUnO1xuaW1wb3J0IHsgRm9vdGVyTW9kdWxlIH0gZnJvbSAnLi9mb290ZXIvZm9vdGVyLm1vZHVsZSc7XG5pbXBvcnQgeyBIZWFkZXJNb2R1bGUgfSBmcm9tICcuL2hlYWRlci9oZWFkZXIubW9kdWxlJztcbmltcG9ydCB7IFNpZGViYXJMZWZ0TW9kdWxlIH0gZnJvbSAnLi9zaWRlYmFyLWxlZnQvc2lkZWJhci1sZWZ0Lm1vZHVsZSc7XG5pbXBvcnQgeyBTaWRlYmFyUmlnaHRNb2R1bGUgfSBmcm9tICcuL3NpZGViYXItcmlnaHQvc2lkZWJhci1yaWdodC5tb2R1bGUnO1xuaW1wb3J0IHsgV3JhcHBlck1vZHVsZSB9IGZyb20gJy4vd3JhcHBlci93cmFwcGVyLm1vZHVsZSc7XG5cbmltcG9ydCB7IExheW91dFNlcnZpY2UgfSBmcm9tICcuL2xheW91dC5zZXJ2aWNlJztcbmltcG9ydCB7IExheW91dFN0YXRlIH0gZnJvbSAnLi9sYXlvdXQuc3RhdGUnO1xuaW1wb3J0IHsgbGF5b3V0UHJvdmlkZXIgfSBmcm9tICcuL2xheW91dC5wcm92aWRlcic7XG5cbmltcG9ydCB7IFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcm91dGluZy5zZXJ2aWNlJztcbmltcG9ydCB7IFdyYXBwZXJTZXJ2aWNlIH0gZnJvbSAnLi93cmFwcGVyL3dyYXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTaWRlYmFyUmlnaHRTZXJ2aWNlIH0gZnJvbSAnLi9zaWRlYmFyLXJpZ2h0L3NpZGViYXItcmlnaHQuc2VydmljZSc7XG5pbXBvcnQgeyBIZWFkZXJTZXJ2aWNlIH0gZnJvbSAnLi9oZWFkZXIvaGVhZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9vdGVyU2VydmljZSB9IGZyb20gJy4vZm9vdGVyL2Zvb3Rlci5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgUm91dGVyTW9kdWxlXSxcbiAgZXhwb3J0czogW0NvbnRlbnRNb2R1bGUsIEZvb3Rlck1vZHVsZSwgSGVhZGVyTW9kdWxlLCBTaWRlYmFyTGVmdE1vZHVsZSwgU2lkZWJhclJpZ2h0TW9kdWxlLCBXcmFwcGVyTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbUm91dGluZ1NlcnZpY2UsIFdyYXBwZXJTZXJ2aWNlLCBTaWRlYmFyUmlnaHRTZXJ2aWNlLCBIZWFkZXJTZXJ2aWNlLCBGb290ZXJTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBMYXlvdXRNb2R1bGUge1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBwYXJlbnRNb2R1bGUgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlOiBMYXlvdXRNb2R1bGUpIHtcbiAgICBpZiAocGFyZW50TW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xheW91dE1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSW1wb3J0IGl0IGluIHRoZSBBcHBNb2R1bGUgb25seSEnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW2ZvclJvb3QgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgZm9yUm9vdFxuICAgKiBAcGFyYW0gIGxheW91dENvbmZpZyBbZGVzY3JpcHRpb25dXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgc3RhdGljIGZvclJvb3QobGF5b3V0Q29uZmlnOiBMYXlvdXRTdGF0ZSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TGF5b3V0TW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBMYXlvdXRNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFsuLi5sYXlvdXRQcm92aWRlcihsYXlvdXRDb25maWcpLCBMYXlvdXRTZXJ2aWNlXVxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0ICogZnJvbSAnLi9sYXlvdXQuc2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL2xheW91dC5zdG9yZSc7XG5leHBvcnQgKiBmcm9tICcuL2xheW91dC5zdGF0ZSc7XG4iXX0=